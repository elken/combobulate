;; -*- lexical-binding: t -*-
;; This file is generated by build-relationships.py
;; Do not edit this file directly.

;; START Production rules for dockerfile
(defconst combobulate-rules-dockerfile 
 '(("add_instruction" (:*unnamed* ("heredoc_block" "param" "path"))) 
 ("arg_instruction" (:*unnamed* nil :default ("double_quoted_string" "single_quoted_string" "unquoted_string") :name ("unquoted_string"))) 
 ("cmd_instruction" (:*unnamed* ("shell_command" "json_string_array"))) 
 ("comment" (:*unnamed* nil)) 
 ("copy_instruction" (:*unnamed* ("heredoc_block" "param" "path"))) 
 ("cross_build_instruction" (:*unnamed* nil)) 
 ("double_quoted_string" (:*unnamed* ("expansion" "escape_sequence"))) 
 ("entrypoint_instruction" (:*unnamed* ("shell_command" "json_string_array"))) 
 ("env_instruction" (:*unnamed* ("env_pair"))) 
 ("env_pair" (:*unnamed* nil :name ("unquoted_string") :value ("double_quoted_string" "single_quoted_string" "unquoted_string"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expansion" (:*unnamed* ("variable"))) 
 ("expose_instruction" (:*unnamed* ("expansion" "expose_port"))) 
 ("expose_port" (:*unnamed* nil)) 
 ("from_instruction" (:*unnamed* ("image_spec" "param") :as ("image_alias"))) 
 ("healthcheck_instruction" (:*unnamed* ("cmd_instruction" "param"))) 
 ("heredoc_block" (:*unnamed* ("heredoc_line" "heredoc_end"))) 
 ("heredoc_end" (:*unnamed* nil)) 
 ("heredoc_line" (:*unnamed* nil)) 
 ("heredoc_marker" (:*unnamed* nil)) 
 ("image_alias" (:*unnamed* ("expansion"))) 
 ("image_digest" (:*unnamed* ("expansion"))) 
 ("image_name" (:*unnamed* ("expansion"))) 
 ("image_spec" (:*unnamed* nil :digest ("image_digest") :name ("image_name") :tag ("image_tag"))) 
 ("image_tag" (:*unnamed* ("expansion"))) 
 ("json_string" (:*unnamed* ("escape_sequence"))) 
 ("json_string_array" (:*unnamed* ("json_string"))) 
 ("label_instruction" (:*unnamed* ("label_pair"))) 
 ("label_pair" (:*unnamed* nil :key ("double_quoted_string" "single_quoted_string" "unquoted_string") :value ("double_quoted_string" "single_quoted_string" "unquoted_string"))) 
 ("line_continuation" (:*unnamed* nil)) 
 ("maintainer_instruction" (:*unnamed* nil)) 
 ("mount_param" (:*unnamed* nil :name nil :value ("mount_param_param"))) 
 ("mount_param_param" (:*unnamed* nil)) 
 ("onbuild_instruction" (:*unnamed* ("env_instruction" "stopsignal_instruction" "entrypoint_instruction" "cmd_instruction" "add_instruction" "from_instruction" "cross_build_instruction" "volume_instruction" "expose_instruction" "shell_instruction" "user_instruction" "label_instruction" "copy_instruction" "workdir_instruction" "onbuild_instruction" "run_instruction" "healthcheck_instruction" "maintainer_instruction" "arg_instruction"))) 
 ("param" (:*unnamed* nil)) 
 ("path" (:*unnamed* ("expansion" "heredoc_marker"))) 
 ("run_instruction" (:*unnamed* ("heredoc_block" "shell_command" "param" "mount_param" "json_string_array"))) 
 ("shell_command" (:*unnamed* ("shell_fragment" "line_continuation"))) 
 ("shell_fragment" (:*unnamed* ("heredoc_marker"))) 
 ("shell_instruction" (:*unnamed* ("json_string_array"))) 
 ("single_quoted_string" (:*unnamed* ("escape_sequence"))) 
 ("source_file" (:*unnamed* ("env_instruction" "stopsignal_instruction" "entrypoint_instruction" "cmd_instruction" "add_instruction" "from_instruction" "cross_build_instruction" "volume_instruction" "expose_instruction" "shell_instruction" "user_instruction" "label_instruction" "copy_instruction" "workdir_instruction" "onbuild_instruction" "run_instruction" "healthcheck_instruction" "maintainer_instruction" "arg_instruction"))) 
 ("stopsignal_instruction" (:*unnamed* ("expansion"))) 
 ("unquoted_string" (:*unnamed* ("expansion"))) 
 ("user_instruction" (:*unnamed* nil :group ("unquoted_string") :user ("unquoted_string"))) 
 ("variable" (:*unnamed* nil)) 
 ("volume_instruction" (:*unnamed* ("json_string_array" "path"))) 
 ("workdir_instruction" (:*unnamed* ("path"))) 
))
;; END Production rules for dockerfile
;; START Inverse production rules for dockerfile
(defconst combobulate-rules-dockerfile-inverse 
 '(("add_instruction" ("source_file" "onbuild_instruction"))
   ("arg_instruction" ("source_file" "onbuild_instruction"))
   ("cmd_instruction" ("source_file" "healthcheck_instruction" "onbuild_instruction"))
   ("copy_instruction" ("source_file" "onbuild_instruction"))
   ("cross_build_instruction" ("source_file" "onbuild_instruction"))
   ("double_quoted_string" ("env_pair" "label_pair" "arg_instruction"))
   ("entrypoint_instruction" ("source_file" "onbuild_instruction"))
   ("env_instruction" ("source_file" "onbuild_instruction"))
   ("env_pair" ("env_instruction"))
   ("escape_sequence" ("double_quoted_string" "json_string" "single_quoted_string"))
   ("expansion" ("double_quoted_string" "image_name" "stopsignal_instruction" "unquoted_string" "image_alias" "expose_instruction" "image_digest" "path" "image_tag"))
   ("expose_instruction" ("source_file" "onbuild_instruction"))
   ("expose_port" ("expose_instruction"))
   ("from_instruction" ("source_file" "onbuild_instruction"))
   ("healthcheck_instruction" ("source_file" "onbuild_instruction"))
   ("heredoc_block" ("copy_instruction" "add_instruction" "run_instruction"))
   ("heredoc_end" ("heredoc_block"))
   ("heredoc_line" ("heredoc_block"))
   ("heredoc_marker" ("shell_fragment" "path"))
   ("image_alias" ("from_instruction"))
   ("image_digest" ("image_spec"))
   ("image_name" ("image_spec"))
   ("image_spec" ("from_instruction"))
   ("image_tag" ("image_spec"))
   ("json_string" ("json_string_array"))
   ("json_string_array" ("entrypoint_instruction" "cmd_instruction" "run_instruction" "volume_instruction" "shell_instruction"))
   ("label_instruction" ("source_file" "onbuild_instruction"))
   ("label_pair" ("label_instruction"))
   ("line_continuation" ("shell_command"))
   ("maintainer_instruction" ("source_file" "onbuild_instruction"))
   ("mount_param" ("run_instruction"))
   ("mount_param_param" ("mount_param"))
   ("onbuild_instruction" ("source_file" "onbuild_instruction"))
   ("param" ("copy_instruction" "add_instruction" "from_instruction" "run_instruction" "healthcheck_instruction"))
   ("path" ("copy_instruction" "add_instruction" "volume_instruction" "workdir_instruction"))
   ("run_instruction" ("source_file" "onbuild_instruction"))
   ("shell_command" ("cmd_instruction" "run_instruction" "entrypoint_instruction"))
   ("shell_fragment" ("shell_command"))
   ("shell_instruction" ("source_file" "onbuild_instruction"))
   ("single_quoted_string" ("env_pair" "label_pair" "arg_instruction"))
   ("stopsignal_instruction" ("source_file" "onbuild_instruction"))
   ("unquoted_string" ("user_instruction" "env_pair" "label_pair" "arg_instruction"))
   ("user_instruction" ("source_file" "onbuild_instruction"))
   ("variable" ("expansion"))
   ("volume_instruction" ("source_file" "onbuild_instruction"))
   ("workdir_instruction" ("source_file" "onbuild_instruction"))
  ) 
)
;; END Inverse production rules for dockerfile
;; START All node types in dockerfile
(defconst combobulate-rules-dockerfile-types 
 '("add_instruction" "arg_instruction" "cmd_instruction" "comment" "copy_instruction" "cross_build_instruction" "double_quoted_string" "entrypoint_instruction" "env_instruction" "env_pair" "escape_sequence" "expansion" "expose_instruction" "expose_port" "from_instruction" "healthcheck_instruction" "heredoc_block" "heredoc_end" "heredoc_line" "heredoc_marker" "image_alias" "image_digest" "image_name" "image_spec" "image_tag" "json_string" "json_string_array" "label_instruction" "label_pair" "line_continuation" "maintainer_instruction" "mount_param" "mount_param_param" "onbuild_instruction" "param" "path" "run_instruction" "shell_command" "shell_fragment" "shell_instruction" "single_quoted_string" "source_file" "stopsignal_instruction" "unquoted_string" "user_instruction" "variable" "volume_instruction" "workdir_instruction") 
)
;; END All node types in dockerfile
;; START All supertypes in dockerfile
(defconst combobulate-rules-dockerfile-supertypes 
 nil 
)
;; END All supertypes in dockerfile

;; START Production rules for yaml
(defconst combobulate-rules-yaml 
 '(("alias" (:*unnamed* ("alias_name"))) 
 ("alias_name" (:*unnamed* nil)) 
 ("anchor" (:*unnamed* ("anchor_name"))) 
 ("anchor_name" (:*unnamed* nil)) 
 ("block_mapping" (:*unnamed* ("block_mapping_pair"))) 
 ("block_mapping_pair" (:*unnamed* nil :key ("flow_node" "block_node") :value ("flow_node" "block_node"))) 
 ("block_node" (:*unnamed* ("block_sequence" "block_scalar" "anchor" "block_mapping" "tag"))) 
 ("block_scalar" (:*unnamed* nil)) 
 ("block_sequence" (:*unnamed* ("block_sequence_item"))) 
 ("block_sequence_item" (:*unnamed* ("flow_node" "block_node"))) 
 ("boolean_scalar" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("directive_name" (:*unnamed* nil)) 
 ("directive_parameter" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("flow_node" "yaml_directive" "reserved_directive" "block_node" "tag_directive"))) 
 ("double_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("float_scalar" (:*unnamed* nil)) 
 ("flow_mapping" (:*unnamed* ("flow_node" "flow_pair"))) 
 ("flow_node" (:*unnamed* ("plain_scalar" "anchor" "tag" "double_quote_scalar" "single_quote_scalar" "flow_mapping" "flow_sequence" "alias"))) 
 ("flow_pair" (:*unnamed* nil :key ("flow_node") :value ("flow_node"))) 
 ("flow_sequence" (:*unnamed* ("flow_node" "flow_pair"))) 
 ("integer_scalar" (:*unnamed* nil)) 
 ("null_scalar" (:*unnamed* nil)) 
 ("plain_scalar" (:*unnamed* ("integer_scalar" "float_scalar" "boolean_scalar" "string_scalar" "null_scalar"))) 
 ("reserved_directive" (:*unnamed* ("directive_name" "directive_parameter"))) 
 ("single_quote_scalar" (:*unnamed* ("escape_sequence"))) 
 ("stream" (:*unnamed* ("document"))) 
 ("string_scalar" (:*unnamed* nil)) 
 ("tag" (:*unnamed* nil)) 
 ("tag_directive" (:*unnamed* ("tag_handle" "tag_prefix"))) 
 ("tag_handle" (:*unnamed* nil)) 
 ("tag_prefix" (:*unnamed* nil)) 
 ("yaml_directive" (:*unnamed* ("yaml_version"))) 
 ("yaml_version" (:*unnamed* nil)) 
))
;; END Production rules for yaml
;; START Inverse production rules for yaml
(defconst combobulate-rules-yaml-inverse 
 '(("alias" ("flow_node"))
   ("alias_name" ("alias"))
   ("anchor" ("flow_node" "block_node"))
   ("anchor_name" ("anchor"))
   ("block_mapping" ("block_node"))
   ("block_mapping_pair" ("block_mapping"))
   ("block_node" ("document" "block_sequence_item" "block_mapping_pair"))
   ("block_scalar" ("block_node"))
   ("block_sequence" ("block_node"))
   ("block_sequence_item" ("block_sequence"))
   ("boolean_scalar" ("plain_scalar"))
   ("directive_name" ("reserved_directive"))
   ("directive_parameter" ("reserved_directive"))
   ("document" ("stream"))
   ("double_quote_scalar" ("flow_node"))
   ("escape_sequence" ("single_quote_scalar" "double_quote_scalar"))
   ("float_scalar" ("plain_scalar"))
   ("flow_mapping" ("flow_node"))
   ("flow_node" ("document" "block_mapping_pair" "block_sequence_item" "flow_mapping" "flow_pair" "flow_sequence"))
   ("flow_pair" ("flow_mapping" "flow_sequence"))
   ("flow_sequence" ("flow_node"))
   ("integer_scalar" ("plain_scalar"))
   ("null_scalar" ("plain_scalar"))
   ("plain_scalar" ("flow_node"))
   ("reserved_directive" ("document"))
   ("single_quote_scalar" ("flow_node"))
   ("string_scalar" ("plain_scalar"))
   ("tag" ("flow_node" "block_node"))
   ("tag_directive" ("document"))
   ("tag_handle" ("tag_directive"))
   ("tag_prefix" ("tag_directive"))
   ("yaml_directive" ("document"))
   ("yaml_version" ("yaml_directive"))
  ) 
)
;; END Inverse production rules for yaml
;; START All node types in yaml
(defconst combobulate-rules-yaml-types 
 '("alias" "alias_name" "anchor" "anchor_name" "block_mapping" "block_mapping_pair" "block_node" "block_scalar" "block_sequence" "block_sequence_item" "boolean_scalar" "comment" "directive_name" "directive_parameter" "document" "double_quote_scalar" "escape_sequence" "float_scalar" "flow_mapping" "flow_node" "flow_pair" "flow_sequence" "integer_scalar" "null_scalar" "plain_scalar" "reserved_directive" "single_quote_scalar" "stream" "string_scalar" "tag" "tag_directive" "tag_handle" "tag_prefix" "yaml_directive" "yaml_version") 
)
;; END All node types in yaml
;; START All supertypes in yaml
(defconst combobulate-rules-yaml-supertypes 
 nil 
)
;; END All supertypes in yaml

;; START Production rules for tsx
(defconst combobulate-rules-tsx 
 '(("_primary_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("accessibility_modifier" (:*unnamed* nil)) 
 ("ambient_declaration" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "property_identifier" "statement_block" "template_literal_type" "declaration" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("array_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("arrow_function" (:*unnamed* nil :body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "expression" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this"))) 
 ("asserts_annotation" (:*unnamed* ("asserts"))) 
 ("assignment_expression" (:*unnamed* nil :left ("member_expression" "undefined" "object_pattern" "parenthesized_expression" "subscript_expression" "identifier" "array_pattern" "non_null_expression") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("member_expression" "identifier" "parenthesized_expression" "subscript_expression" "non_null_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("abstract_method_signature" "decorator" "public_field_definition" "index_signature" "method_definition" "class_static_block" "method_signature"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("implements_clause" "extends_clause"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:*unnamed* nil :alternative ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :consequence ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :left ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :right ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("constraint" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("generator_function_declaration" "interface_declaration" "module" "variable_declaration" "type_alias_declaration" "function_declaration" "function_signature" "import_alias" "abstract_class_declaration" "enum_declaration" "internal_module" "ambient_declaration" "lexical_declaration" "class_declaration"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("default_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("enum_assignment" (:*unnamed* nil :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number"))) 
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("existential_type" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("identifier" "string") :name ("identifier" "string"))) 
 ("export_statement" (:*unnamed* ("identifier" "export_clause" "namespace_export" "expression") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("jsx_self_closing_element" "unary_expression" "await_expression" "augmented_assignment_expression" "yield_expression" "satisfies_expression" "jsx_element" "glimmer_template" "primary_expression" "as_expression" "update_expression" "binary_expression" "ternary_expression" "assignment_expression" "new_expression" "internal_module" "instantiation_expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:*unnamed* nil :type ("type_identifier" "generic_type" "nested_type_identifier"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("member_expression" "undefined" "object_pattern" "parenthesized_expression" "subscript_expression" "identifier" "array_pattern" "non_null_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("expression_statement" "empty_statement") :increment ("expression" "sequence_expression") :initializer ("expression_statement" "empty_statement" "lexical_declaration" "variable_declaration"))) 
 ("formal_parameters" (:*unnamed* ("required_parameter" "optional_parameter"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "type_predicate" "nested_type_identifier" "asserts" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("import" (:*unnamed* nil)) 
 ("import_alias" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("import_clause" (:*unnamed* ("identifier" "namespace_import" "named_imports"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("identifier" "string"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :name ("identifier") :sign nil :type ("type_annotation" "opting_type_annotation" "omitting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("infer_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("instantiation_expression" (:*unnamed* ("expression") :function ("identifier" "import" "member_expression" "subscript_expression") :type_arguments ("type_arguments"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("identifier" "nested_identifier" "string"))) 
 ("intersection_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "property_identifier" "jsx_expression" "string" "jsx_self_closing_element" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_self_closing_element" "jsx_text" "jsx_expression" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("spread_element" "expression" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("null" "true" "false" "undefined" "string" "number" "unary_expression"))) 
 ("lookup_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("mapped_type_clause" (:*unnamed* nil :alias ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :name ("type_identifier") :type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("member_expression" (:*unnamed* ("identifier" "property_identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :body ("statement_block") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:*unnamed* nil :body ("statement_block") :name ("identifier" "nested_identifier" "string"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("identifier" "string"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "property_identifier" "member_expression"))) 
 ("nested_type_identifier" (:*unnamed* nil :module ("identifier" "nested_identifier") :name ("type_identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "spread_element" "pair" "shorthand_property_identifier"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "object_pattern" "shorthand_property_identifier_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "object_assignment_pattern" "pair_pattern" "shorthand_property_identifier_pattern"))) 
 ("object_type" (:*unnamed* ("property_signature" "export_statement" "construct_signature" "index_signature" "call_signature" "method_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("opting_type_annotation" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("optional_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("override_modifier" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("pattern" (:*unnamed* ("member_expression" "undefined" "object_pattern" "subscript_expression" "identifier" "array_pattern" "rest_pattern" "non_null_expression"))) 
 ("predefined_type" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("false" "undefined" "function" "object" "template_string" "import" "regex" "subscript_expression" "array" "call_expression" "string" "generator_function" "arrow_function" "class" "non_null_expression" "true" "this" "super" "member_expression" "null" "parenthesized_expression" "meta_property" "identifier" "number"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("hash_bang_line" "statement"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("property_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("required_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier" "rest_pattern") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("member_expression" "undefined" "object_pattern" "array_pattern" "identifier" "subscript_expression" "non_null_expression"))) 
 ("rest_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("satisfies_expression" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "expression" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("for_in_statement" "if_statement" "for_statement" "labeled_statement" "with_statement" "import_statement" "throw_statement" "statement_block" "declaration" "continue_statement" "empty_statement" "while_statement" "return_statement" "try_statement" "debugger_statement" "export_statement" "break_statement" "do_statement" "switch_statement" "expression_statement"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "string" "number" "predefined_type" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("template_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("this_type" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "required_parameter" "optional_type" "nested_type_identifier" "constructor_type" "literal_type" "optional_parameter" "generic_type" "tuple_type" "array_type" "infer_type" "rest_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_annotation" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_arguments" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:*unnamed* nil :name ("identifier" "this") :type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("member_expression" "identifier" "call_expression" "subscript_expression" "instantiation_expression"))) 
 ("unary_expression" (:*unnamed* nil :argument ("number" "expression") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("union_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for tsx
;; START Inverse production rules for tsx
(defconst combobulate-rules-tsx-inverse 
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("abstract_method_signature" "property_signature" "method_definition" "required_parameter" "public_field_definition" "optional_parameter" "method_signature"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("for_in_statement" "object_assignment_pattern" "catch_clause" "variable_declarator" "assignment_expression" "pattern" "rest_pattern"))
   ("array_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("generator_function_declaration" "abstract_method_signature" "function" "method_definition" "function_declaration" "function_signature" "generator_function" "arrow_function" "call_signature" "method_signature"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("type_query" "primary_expression" "decorator"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("abstract_method_signature" "pair_pattern" "property_signature" "method_definition" "pair" "enum_body" "public_field_definition" "enum_assignment" "method_signature"))
   ("conditional_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("export_statement" "ambient_declaration" "statement"))
   ("decorator" ("export_statement" "required_parameter" "abstract_class_declaration" "class_body" "optional_parameter" "class" "class_declaration"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("string" "template_string"))
   ("existential_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("object_type" "statement"))
   ("expression" ("for_in_statement" "arguments" "jsx_expression" "unary_expression" "sequence_expression" "throw_statement" "await_expression" "extends_clause" "required_parameter" "call_expression" "non_null_expression" "satisfies_expression" "return_statement" "parenthesized_expression" "export_statement" "binary_expression" "pair" "assignment_expression" "ternary_expression" "instantiation_expression" "for_statement" "object_assignment_pattern" "assignment_pattern" "subscript_expression" "array" "public_field_definition" "template_substitution" "augmented_assignment_expression" "arrow_function" "yield_expression" "member_expression" "spread_element" "as_expression" "update_expression" "variable_declarator" "computed_property_name" "expression_statement" "enum_assignment" "optional_parameter" "switch_case"))
   ("expression_statement" ("for_statement" "statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("literal_type" "primary_expression"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("generator_function_declaration" "abstract_method_signature" "constructor_type" "function" "method_definition" "function_declaration" "function_signature" "function_type" "construct_signature" "generator_function" "arrow_function" "call_signature" "method_signature"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "extends_type_clause" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("for_in_statement" "function" "index_signature" "catch_clause" "required_parameter" "enum_declaration" "type_predicate" "nested_type_identifier" "asserts" "jsx_namespace_name" "namespace_import" "import_clause" "export_statement" "assignment_expression" "instantiation_expression" "type_query" "generator_function_declaration" "decorator" "jsx_self_closing_element" "nested_identifier" "export_specifier" "generator_function" "augmented_assignment_expression" "arrow_function" "member_expression" "import_require_clause" "module" "primary_expression" "import_specifier" "jsx_closing_element" "jsx_opening_element" "function_declaration" "variable_declarator" "function_signature" "import_alias" "rest_pattern" "internal_module" "namespace_export" "pattern" "optional_parameter"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("instantiation_expression" "primary_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("class_body" "object_type"))
   ("index_type_query" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("infer_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("instantiation_expression" ("type_query" "expression"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("intersection_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("jsx_attribute" "expression" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_attribute" "jsx_self_closing_element" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_attribute" "jsx_self_closing_element" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("jsx_attribute" "expression" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("literal_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("lookup_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("for_in_statement" "member_expression" "primary_expression" "decorator" "jsx_self_closing_element" "type_query" "pattern" "nested_identifier" "jsx_closing_element" "jsx_opening_element" "assignment_expression" "instantiation_expression" "augmented_assignment_expression" "rest_pattern"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("method_signature" ("class_body" "object_type"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("module" "internal_module" "nested_type_identifier" "import_alias"))
   ("nested_type_identifier" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "generic_type" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "extends_type_clause" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("for_in_statement" "primary_expression" "pattern" "assignment_expression" "augmented_assignment_expression" "rest_pattern"))
   ("null" ("literal_type" "primary_expression"))
   ("number" ("abstract_method_signature" "primary_expression" "pair_pattern" "literal_type" "property_signature" "method_definition" "subscript_expression" "unary_expression" "pair" "enum_body" "public_field_definition" "enum_assignment" "method_signature"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("for_in_statement" "object_assignment_pattern" "catch_clause" "variable_declarator" "assignment_expression" "pattern" "rest_pattern"))
   ("object_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "interface_declaration" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("member_expression" "subscript_expression"))
   ("optional_parameter" ("tuple_type" "formal_parameters"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("property_signature" "method_definition" "required_parameter" "public_field_definition" "optional_parameter" "method_signature"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("for_in_statement" "if_statement" "primary_expression" "with_statement" "do_statement" "assignment_expression" "switch_statement" "augmented_assignment_expression" "while_statement"))
   ("parenthesized_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("pattern" ("assignment_pattern" "required_parameter" "array_pattern" "optional_parameter" "pair_pattern"))
   ("predefined_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "subscript_expression" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("member_expression" "abstract_method_signature" "pair_pattern" "property_signature" "method_definition" "pair" "enum_body" "public_field_definition" "enum_assignment" "method_signature"))
   ("property_identifier" ("member_expression" "jsx_attribute" "abstract_method_signature" "pair_pattern" "property_signature" "method_definition" "nested_identifier" "pair" "enum_body" "public_field_definition" "ambient_declaration" "enum_assignment" "method_signature"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("tuple_type" "formal_parameters"))
   ("rest_pattern" ("required_parameter" "pattern" "object_pattern"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("for_in_statement" "for_statement" "return_statement" "jsx_expression" "parenthesized_expression" "subscript_expression" "sequence_expression" "throw_statement" "template_substitution" "expression_statement" "switch_case"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("object" "arguments" "array" "jsx_expression"))
   ("statement" ("for_in_statement" "for_statement" "if_statement" "labeled_statement" "switch_default" "program" "else_clause" "with_statement" "statement_block" "do_statement" "while_statement" "switch_case"))
   ("statement_block" ("finally_clause" "generator_function_declaration" "module" "try_statement" "function" "method_definition" "statement" "catch_clause" "function_declaration" "ambient_declaration" "internal_module" "class_static_block" "arrow_function" "generator_function"))
   ("statement_identifier" ("break_statement" "continue_statement" "labeled_statement"))
   ("string" ("import_statement" "enum_body" "abstract_method_signature" "method_definition" "export_statement" "pair" "method_signature" "jsx_attribute" "property_signature" "subscript_expression" "export_specifier" "public_field_definition" "import_require_clause" "module" "primary_expression" "literal_type" "import_specifier" "internal_module" "namespace_export" "enum_assignment" "pair_pattern"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("for_in_statement" "primary_expression" "type_query" "pattern" "assignment_expression" "instantiation_expression" "augmented_assignment_expression" "rest_pattern"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression" "required_parameter" "type_predicate" "optional_parameter" "asserts"))
   ("this_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("throw_statement" ("statement"))
   ("true" ("literal_type" "primary_expression"))
   ("try_statement" ("statement"))
   ("tuple_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("function" "index_signature" "catch_clause" "required_parameter" "abstract_method_signature" "parenthesized_expression" "method_definition" "call_signature" "method_signature" "generator_function_declaration" "property_signature" "public_field_definition" "generator_function" "arrow_function" "variable_declarator" "function_declaration" "function_signature" "construct_signature" "optional_parameter"))
   ("type_arguments" ("jsx_self_closing_element" "generic_type" "jsx_opening_element" "extends_clause" "new_expression" "call_expression" "instantiation_expression"))
   ("type_identifier" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "abstract_class_declaration" "type_predicate" "nested_type_identifier" "satisfies_expression" "interface_declaration" "constructor_type" "type_annotation" "generic_type" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "extends_type_clause" "class" "class_declaration" "as_expression" "type_parameter" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("generator_function_declaration" "construct_signature" "abstract_method_signature" "interface_declaration" "constructor_type" "function" "type_alias_declaration" "method_definition" "function_declaration" "function_signature" "method_signature" "function_type" "abstract_class_declaration" "generator_function" "arrow_function" "call_signature" "class" "class_declaration"))
   ("type_predicate" ("type_predicate_annotation" "function_type" "asserts"))
   ("type_predicate_annotation" ("generator_function_declaration" "abstract_method_signature" "function" "method_definition" "function_declaration" "function_signature" "generator_function" "arrow_function" "call_signature" "method_signature"))
   ("type_query" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("unary_expression" ("literal_type" "expression"))
   ("undefined" ("for_in_statement" "primary_expression" "literal_type" "assignment_expression" "pattern" "rest_pattern"))
   ("union_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for tsx
;; START All node types in tsx
(defconst combobulate-rules-tsx-types 
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in tsx
;; START All supertypes in tsx
(defconst combobulate-rules-tsx-supertypes 
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in tsx

;; START Production rules for css
(defconst combobulate-rules-css 
 '(("adjacent_sibling_selector" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("arguments" (:*unnamed* ("string_value" "sibling_selector" "adjacent_sibling_selector" "float_value" "plain_value" "descendant_selector" "pseudo_element_selector" "color_value" "namespace_selector" "call_expression" "id_selector" "universal_selector" "important" "integer_value" "nesting_selector" "grid_value" "attribute_selector" "class_selector" "tag_name" "binary_expression" "pseudo_class_selector" "parenthesized_value" "child_selector"))) 
 ("at_keyword" (:*unnamed* nil)) 
 ("at_rule" (:*unnamed* ("keyword_query" "parenthesized_query" "block" "feature_query" "binary_query" "selector_query" "at_keyword" "unary_query"))) 
 ("attribute_name" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("attribute_selector" (:*unnamed* ("string_value" "sibling_selector" "attribute_name" "adjacent_sibling_selector" "float_value" "plain_value" "descendant_selector" "pseudo_element_selector" "color_value" "namespace_selector" "call_expression" "id_selector" "universal_selector" "important" "integer_value" "nesting_selector" "grid_value" "attribute_selector" "class_selector" "tag_name" "binary_expression" "pseudo_class_selector" "parenthesized_value" "child_selector"))) 
 ("binary_expression" (:*unnamed* ("string_value" "grid_value" "float_value" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "integer_value"))) 
 ("binary_query" (:*unnamed* ("keyword_query" "parenthesized_query" "selector_query" "feature_query" "binary_query" "unary_query"))) 
 ("block" (:*unnamed* ("media_statement" "namespace_statement" "charset_statement" "keyframes_statement" "supports_statement" "import_statement" "at_rule" "declaration" "postcss_statement" "rule_set"))) 
 ("call_expression" (:*unnamed* ("arguments" "function_name"))) 
 ("charset_statement" (:*unnamed* ("string_value" "grid_value" "float_value" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "integer_value"))) 
 ("child_selector" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("class_name" (:*unnamed* nil)) 
 ("class_selector" (:*unnamed* ("string_value" "sibling_selector" "class_name" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("color_value" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("string_value" "grid_value" "property_name" "float_value" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "integer_value"))) 
 ("descendant_selector" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("feature_name" (:*unnamed* nil)) 
 ("feature_query" (:*unnamed* ("string_value" "grid_value" "float_value" "feature_name" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "integer_value"))) 
 ("float_value" (:*unnamed* ("unit"))) 
 ("from" (:*unnamed* nil)) 
 ("function_name" (:*unnamed* nil)) 
 ("grid_value" (:*unnamed* ("string_value" "grid_value" "float_value" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "integer_value"))) 
 ("id_name" (:*unnamed* nil)) 
 ("id_selector" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "id_name" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("import_statement" (:*unnamed* ("string_value" "keyword_query" "float_value" "binary_query" "plain_value" "color_value" "call_expression" "important" "integer_value" "grid_value" "parenthesized_query" "feature_query" "binary_expression" "selector_query" "parenthesized_value" "unary_query"))) 
 ("important" (:*unnamed* nil)) 
 ("integer_value" (:*unnamed* ("unit"))) 
 ("js_comment" (:*unnamed* nil)) 
 ("keyframe_block" (:*unnamed* ("from" "to" "block" "integer_value"))) 
 ("keyframe_block_list" (:*unnamed* ("keyframe_block"))) 
 ("keyframes_name" (:*unnamed* nil)) 
 ("keyframes_statement" (:*unnamed* ("keyframe_block_list" "keyframes_name" "at_keyword"))) 
 ("keyword_query" (:*unnamed* nil)) 
 ("media_statement" (:*unnamed* ("keyword_query" "parenthesized_query" "block" "selector_query" "feature_query" "binary_query" "unary_query"))) 
 ("namespace_name" (:*unnamed* nil)) 
 ("namespace_selector" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("namespace_statement" (:*unnamed* ("call_expression" "namespace_name" "string_value"))) 
 ("nesting_selector" (:*unnamed* nil)) 
 ("parenthesized_query" (:*unnamed* ("keyword_query" "parenthesized_query" "selector_query" "feature_query" "binary_query" "unary_query"))) 
 ("parenthesized_value" (:*unnamed* ("string_value" "grid_value" "float_value" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "integer_value"))) 
 ("plain_value" (:*unnamed* nil)) 
 ("postcss_statement" (:*unnamed* ("string_value" "grid_value" "float_value" "plain_value" "binary_expression" "color_value" "call_expression" "parenthesized_value" "important" "at_keyword" "integer_value"))) 
 ("property_name" (:*unnamed* nil)) 
 ("pseudo_class_selector" (:*unnamed* ("string_value" "arguments" "class_name" "sibling_selector" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "universal_selector" "namespace_selector" "id_selector" "nesting_selector" "attribute_selector" "class_selector" "tag_name" "pseudo_class_selector" "child_selector"))) 
 ("pseudo_element_selector" (:*unnamed* ("string_value" "arguments" "class_selector" "sibling_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("rule_set" (:*unnamed* ("selectors" "block"))) 
 ("selector_query" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("selectors" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("sibling_selector" (:*unnamed* ("string_value" "sibling_selector" "class_selector" "adjacent_sibling_selector" "nesting_selector" "tag_name" "universal_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))) 
 ("string_value" (:*unnamed* nil)) 
 ("stylesheet" (:*unnamed* ("media_statement" "namespace_statement" "charset_statement" "keyframes_statement" "supports_statement" "import_statement" "at_rule" "declaration" "rule_set"))) 
 ("supports_statement" (:*unnamed* ("keyword_query" "parenthesized_query" "block" "selector_query" "feature_query" "binary_query" "unary_query"))) 
 ("tag_name" (:*unnamed* nil)) 
 ("to" (:*unnamed* nil)) 
 ("unary_query" (:*unnamed* ("keyword_query" "parenthesized_query" "selector_query" "feature_query" "binary_query" "unary_query"))) 
 ("unit" (:*unnamed* nil)) 
 ("universal_selector" (:*unnamed* nil)) 
))
;; END Production rules for css
;; START Inverse production rules for css
(defconst combobulate-rules-css-inverse 
 '(("adjacent_sibling_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("arguments" ("call_expression" "pseudo_class_selector" "pseudo_element_selector"))
   ("at_keyword" ("keyframes_statement" "at_rule" "postcss_statement"))
   ("at_rule" ("stylesheet" "block"))
   ("attribute_name" ("attribute_selector"))
   ("attribute_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("binary_expression" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("binary_query" ("media_statement" "parenthesized_query" "supports_statement" "import_statement" "at_rule" "binary_query" "unary_query"))
   ("block" ("media_statement" "supports_statement" "at_rule" "rule_set" "keyframe_block"))
   ("call_expression" ("grid_value" "arguments" "namespace_statement" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("charset_statement" ("stylesheet" "block"))
   ("child_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("class_name" ("pseudo_class_selector" "class_selector"))
   ("class_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("color_value" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("declaration" ("stylesheet" "block"))
   ("descendant_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("feature_name" ("feature_query"))
   ("feature_query" ("media_statement" "parenthesized_query" "supports_statement" "import_statement" "at_rule" "binary_query" "unary_query"))
   ("float_value" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("from" ("keyframe_block"))
   ("function_name" ("call_expression"))
   ("grid_value" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("id_name" ("id_selector"))
   ("id_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("import_statement" ("stylesheet" "block"))
   ("important" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("integer_value" ("grid_value" "arguments" "postcss_statement" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "keyframe_block" "parenthesized_value" "attribute_selector"))
   ("keyframe_block" ("keyframe_block_list"))
   ("keyframe_block_list" ("keyframes_statement"))
   ("keyframes_name" ("keyframes_statement"))
   ("keyframes_statement" ("stylesheet" "block"))
   ("keyword_query" ("media_statement" "parenthesized_query" "supports_statement" "import_statement" "at_rule" "binary_query" "unary_query"))
   ("media_statement" ("stylesheet" "block"))
   ("namespace_name" ("namespace_statement"))
   ("namespace_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("namespace_statement" ("stylesheet" "block"))
   ("nesting_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("parenthesized_query" ("media_statement" "parenthesized_query" "supports_statement" "import_statement" "at_rule" "binary_query" "unary_query"))
   ("parenthesized_value" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("plain_value" ("grid_value" "arguments" "charset_statement" "feature_query" "import_statement" "binary_expression" "declaration" "postcss_statement" "parenthesized_value" "attribute_selector"))
   ("postcss_statement" ("block"))
   ("property_name" ("declaration"))
   ("pseudo_class_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("pseudo_element_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("rule_set" ("stylesheet" "block"))
   ("selector_query" ("media_statement" "parenthesized_query" "supports_statement" "import_statement" "at_rule" "binary_query" "unary_query"))
   ("selectors" ("rule_set"))
   ("sibling_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("string_value" ("selectors" "arguments" "namespace_statement" "attribute_name" "adjacent_sibling_selector" "import_statement" "descendant_selector" "pseudo_element_selector" "declaration" "namespace_selector" "id_selector" "grid_value" "class_selector" "binary_expression" "selector_query" "parenthesized_value" "sibling_selector" "charset_statement" "attribute_selector" "feature_query" "pseudo_class_selector" "postcss_statement" "child_selector"))
   ("supports_statement" ("stylesheet" "block"))
   ("tag_name" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
   ("to" ("keyframe_block"))
   ("unary_query" ("media_statement" "parenthesized_query" "supports_statement" "import_statement" "at_rule" "binary_query" "unary_query"))
   ("unit" ("float_value" "integer_value"))
   ("universal_selector" ("selectors" "arguments" "class_selector" "sibling_selector" "selector_query" "attribute_name" "adjacent_sibling_selector" "descendant_selector" "pseudo_element_selector" "pseudo_class_selector" "namespace_selector" "id_selector" "attribute_selector" "child_selector"))
  ) 
)
;; END Inverse production rules for css
;; START All node types in css
(defconst combobulate-rules-css-types 
 '("adjacent_sibling_selector" "arguments" "at_keyword" "at_rule" "attribute_name" "attribute_selector" "binary_expression" "binary_query" "block" "call_expression" "charset_statement" "child_selector" "class_name" "class_selector" "color_value" "comment" "declaration" "descendant_selector" "feature_name" "feature_query" "float_value" "from" "function_name" "grid_value" "id_name" "id_selector" "import_statement" "important" "integer_value" "js_comment" "keyframe_block" "keyframe_block_list" "keyframes_name" "keyframes_statement" "keyword_query" "media_statement" "namespace_name" "namespace_selector" "namespace_statement" "nesting_selector" "parenthesized_query" "parenthesized_value" "plain_value" "postcss_statement" "property_name" "pseudo_class_selector" "pseudo_element_selector" "rule_set" "selector_query" "selectors" "sibling_selector" "string_value" "stylesheet" "supports_statement" "tag_name" "to" "unary_query" "unit" "universal_selector") 
)
;; END All node types in css
;; START All supertypes in css
(defconst combobulate-rules-css-supertypes 
 nil 
)
;; END All supertypes in css

;; START Production rules for typescript
(defconst combobulate-rules-typescript 
 '(("_primary_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("abstract_class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("abstract_method_signature" (:*unnamed* ("accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("accessibility_modifier" (:*unnamed* nil)) 
 ("ambient_declaration" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "property_identifier" "statement_block" "template_literal_type" "declaration" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("array_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("arrow_function" (:*unnamed* nil :body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("as_expression" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "expression" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("asserts" (:*unnamed* ("identifier" "type_predicate" "this"))) 
 ("asserts_annotation" (:*unnamed* ("asserts"))) 
 ("assignment_expression" (:*unnamed* nil :left ("member_expression" "undefined" "object_pattern" "parenthesized_expression" "subscript_expression" "identifier" "array_pattern" "non_null_expression") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("member_expression" "identifier" "parenthesized_expression" "subscript_expression" "non_null_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :type_arguments ("type_arguments"))) 
 ("call_signature" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern") :type ("type_annotation"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_body" (:*unnamed* ("abstract_method_signature" "decorator" "public_field_definition" "index_signature" "method_definition" "class_static_block" "method_signature"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("class_heritage" (:*unnamed* ("implements_clause" "extends_clause"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("conditional_type" (:*unnamed* nil :alternative ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :consequence ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :left ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :right ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("constraint" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("construct_signature" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_annotation") :type_parameters ("type_parameters"))) 
 ("constructor_type" (:*unnamed* nil :parameters ("formal_parameters") :type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :type_parameters ("type_parameters"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("generator_function_declaration" "interface_declaration" "module" "variable_declaration" "type_alias_declaration" "function_declaration" "function_signature" "import_alias" "abstract_class_declaration" "enum_declaration" "internal_module" "ambient_declaration" "lexical_declaration" "class_declaration"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("default_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("enum_assignment" (:*unnamed* nil :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("expression"))) 
 ("enum_body" (:*unnamed* ("enum_assignment") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number"))) 
 ("enum_declaration" (:*unnamed* nil :body ("enum_body") :name ("identifier"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("existential_type" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("identifier" "string") :name ("identifier" "string"))) 
 ("export_statement" (:*unnamed* ("identifier" "export_clause" "namespace_export" "expression") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("type_assertion" "unary_expression" "await_expression" "augmented_assignment_expression" "yield_expression" "satisfies_expression" "glimmer_template" "primary_expression" "as_expression" "update_expression" "binary_expression" "ternary_expression" "assignment_expression" "new_expression" "internal_module" "instantiation_expression"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("extends_clause" (:*unnamed* nil :type_arguments ("type_arguments") :value ("expression"))) 
 ("extends_type_clause" (:*unnamed* nil :type ("type_identifier" "generic_type" "nested_type_identifier"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("flow_maybe_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("member_expression" "undefined" "object_pattern" "parenthesized_expression" "subscript_expression" "identifier" "array_pattern" "non_null_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("expression_statement" "empty_statement") :increment ("expression" "sequence_expression") :initializer ("expression_statement" "empty_statement" "lexical_declaration" "variable_declaration"))) 
 ("formal_parameters" (:*unnamed* ("required_parameter" "optional_parameter"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_signature" (:*unnamed* nil :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("function_type" (:*unnamed* nil :parameters ("formal_parameters") :return_type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "type_predicate" "nested_type_identifier" "asserts" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :type_parameters ("type_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("generic_type" (:*unnamed* nil :name ("type_identifier" "nested_type_identifier") :type_arguments ("type_arguments"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("implements_clause" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("import" (:*unnamed* nil)) 
 ("import_alias" (:*unnamed* ("identifier" "nested_identifier"))) 
 ("import_clause" (:*unnamed* ("identifier" "namespace_import" "named_imports"))) 
 ("import_require_clause" (:*unnamed* ("identifier") :source ("string"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("identifier" "string"))) 
 ("import_statement" (:*unnamed* ("import_require_clause" "import_clause") :source ("string"))) 
 ("index_signature" (:*unnamed* ("mapped_type_clause") :index_type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :name ("identifier") :sign nil :type ("type_annotation" "opting_type_annotation" "omitting_type_annotation"))) 
 ("index_type_query" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("infer_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("instantiation_expression" (:*unnamed* ("expression") :function ("identifier" "import" "member_expression" "subscript_expression") :type_arguments ("type_arguments"))) 
 ("interface_declaration" (:*unnamed* ("extends_type_clause") :body ("object_type") :name ("type_identifier") :type_parameters ("type_parameters"))) 
 ("internal_module" (:*unnamed* nil :body ("statement_block") :name ("identifier" "nested_identifier" "string"))) 
 ("intersection_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "property_identifier" "jsx_expression" "string" "jsx_self_closing_element" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_self_closing_element" "jsx_text" "jsx_expression" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("spread_element" "expression" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression") :type_arguments ("type_arguments"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("literal_type" (:*unnamed* ("null" "true" "false" "undefined" "string" "number" "unary_expression"))) 
 ("lookup_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("mapped_type_clause" (:*unnamed* nil :alias ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type") :name ("type_identifier") :type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("member_expression" (:*unnamed* ("identifier" "property_identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :body ("statement_block") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("method_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters") :return_type ("asserts_annotation" "type_annotation" "type_predicate_annotation") :type_parameters ("type_parameters"))) 
 ("module" (:*unnamed* nil :body ("statement_block") :name ("identifier" "nested_identifier" "string"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("identifier" "string"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("nested_identifier" (:*unnamed* ("identifier" "property_identifier" "member_expression"))) 
 ("nested_type_identifier" (:*unnamed* nil :module ("identifier" "nested_identifier") :name ("type_identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression") :type_arguments ("type_arguments"))) 
 ("non_null_expression" (:*unnamed* ("expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "spread_element" "pair" "shorthand_property_identifier"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "object_pattern" "shorthand_property_identifier_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "object_assignment_pattern" "pair_pattern" "shorthand_property_identifier_pattern"))) 
 ("object_type" (:*unnamed* ("property_signature" "export_statement" "construct_signature" "index_signature" "call_signature" "method_signature"))) 
 ("omitting_type_annotation" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("opting_type_annotation" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("optional_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("optional_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("override_modifier" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression") :type ("type_annotation"))) 
 ("parenthesized_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("pattern" (:*unnamed* ("member_expression" "undefined" "object_pattern" "subscript_expression" "identifier" "array_pattern" "rest_pattern" "non_null_expression"))) 
 ("predefined_type" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("false" "undefined" "function" "object" "template_string" "import" "regex" "subscript_expression" "array" "call_expression" "string" "generator_function" "arrow_function" "class" "non_null_expression" "true" "this" "super" "member_expression" "null" "parenthesized_expression" "meta_property" "identifier" "number"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("hash_bang_line" "statement"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("property_signature" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :type ("type_annotation"))) 
 ("public_field_definition" (:*unnamed* ("override_modifier" "accessibility_modifier") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :type ("type_annotation") :value ("expression"))) 
 ("readonly_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("required_parameter" (:*unnamed* ("override_modifier" "accessibility_modifier") :decorator ("decorator") :name ("identifier" "rest_pattern") :pattern ("pattern" "this") :type ("type_annotation") :value ("expression"))) 
 ("rest_pattern" (:*unnamed* ("member_expression" "undefined" "object_pattern" "array_pattern" "identifier" "subscript_expression" "non_null_expression"))) 
 ("rest_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("satisfies_expression" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "expression" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("for_in_statement" "if_statement" "for_statement" "labeled_statement" "with_statement" "import_statement" "throw_statement" "statement_block" "declaration" "continue_statement" "empty_statement" "while_statement" "return_statement" "try_statement" "debugger_statement" "export_statement" "break_statement" "do_statement" "switch_statement" "expression_statement"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "string" "number" "predefined_type" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_literal_type" (:*unnamed* ("template_type"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("template_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "nested_type_identifier" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("this_type" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("tuple_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "required_parameter" "optional_type" "nested_type_identifier" "constructor_type" "literal_type" "optional_parameter" "generic_type" "tuple_type" "array_type" "infer_type" "rest_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_alias_declaration" (:*unnamed* nil :name ("type_identifier") :type_parameters ("type_parameters") :value ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_annotation" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_arguments" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_assertion" (:*unnamed* ("type_arguments" "expression"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* nil :constraint ("constraint") :name ("type_identifier") :value ("default_type"))) 
 ("type_parameters" (:*unnamed* ("type_parameter"))) 
 ("type_predicate" (:*unnamed* nil :name ("identifier" "this") :type ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("type_predicate_annotation" (:*unnamed* ("type_predicate"))) 
 ("type_query" (:*unnamed* ("member_expression" "identifier" "call_expression" "subscript_expression" "instantiation_expression"))) 
 ("unary_expression" (:*unnamed* nil :argument ("number" "expression") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("union_type" (:*unnamed* ("type_identifier" "conditional_type" "union_type" "index_type_query" "readonly_type" "this_type" "existential_type" "lookup_type" "intersection_type" "template_literal_type" "function_type" "nested_type_identifier" "constructor_type" "literal_type" "generic_type" "tuple_type" "array_type" "infer_type" "parenthesized_type" "flow_maybe_type" "type_query" "predefined_type" "object_type"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :type ("type_annotation") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for typescript
;; START Inverse production rules for typescript
(defconst combobulate-rules-typescript-inverse 
 '(("abstract_class_declaration" ("declaration"))
   ("abstract_method_signature" ("class_body"))
   ("accessibility_modifier" ("abstract_method_signature" "property_signature" "method_definition" "required_parameter" "public_field_definition" "optional_parameter" "method_signature"))
   ("ambient_declaration" ("declaration"))
   ("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("for_in_statement" "object_assignment_pattern" "catch_clause" "variable_declarator" "assignment_expression" "pattern" "rest_pattern"))
   ("array_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("arrow_function" ("primary_expression"))
   ("as_expression" ("expression"))
   ("asserts" ("asserts_annotation" "function_type"))
   ("asserts_annotation" ("generator_function_declaration" "abstract_method_signature" "function" "method_definition" "function_declaration" "function_signature" "generator_function" "arrow_function" "call_signature" "method_signature"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("type_query" "primary_expression" "decorator"))
   ("call_signature" ("object_type"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class_declaration" "class" "abstract_class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("abstract_method_signature" "pair_pattern" "property_signature" "method_definition" "pair" "enum_body" "public_field_definition" "enum_assignment" "method_signature"))
   ("conditional_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("constraint" ("type_parameter"))
   ("construct_signature" ("object_type"))
   ("constructor_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("export_statement" "ambient_declaration" "statement"))
   ("decorator" ("export_statement" "required_parameter" "abstract_class_declaration" "class_body" "optional_parameter" "class" "class_declaration"))
   ("default_type" ("type_parameter"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("enum_assignment" ("enum_body"))
   ("enum_body" ("enum_declaration"))
   ("enum_declaration" ("declaration"))
   ("escape_sequence" ("string" "template_string"))
   ("existential_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("object_type" "statement"))
   ("expression" ("for_in_statement" "arguments" "jsx_expression" "unary_expression" "sequence_expression" "throw_statement" "await_expression" "extends_clause" "required_parameter" "call_expression" "non_null_expression" "satisfies_expression" "return_statement" "parenthesized_expression" "export_statement" "binary_expression" "pair" "assignment_expression" "ternary_expression" "instantiation_expression" "for_statement" "object_assignment_pattern" "type_assertion" "assignment_pattern" "subscript_expression" "array" "public_field_definition" "template_substitution" "augmented_assignment_expression" "arrow_function" "yield_expression" "member_expression" "spread_element" "as_expression" "update_expression" "variable_declarator" "computed_property_name" "expression_statement" "enum_assignment" "optional_parameter" "switch_case"))
   ("expression_statement" ("for_statement" "statement"))
   ("extends_clause" ("class_heritage"))
   ("extends_type_clause" ("interface_declaration"))
   ("false" ("literal_type" "primary_expression"))
   ("finally_clause" ("try_statement"))
   ("flow_maybe_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("generator_function_declaration" "abstract_method_signature" "constructor_type" "function" "method_definition" "function_declaration" "function_signature" "function_type" "construct_signature" "generator_function" "arrow_function" "call_signature" "method_signature"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("function_signature" ("declaration"))
   ("function_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("generic_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "extends_type_clause" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("for_in_statement" "function" "index_signature" "catch_clause" "required_parameter" "enum_declaration" "type_predicate" "nested_type_identifier" "asserts" "jsx_namespace_name" "namespace_import" "import_clause" "export_statement" "assignment_expression" "instantiation_expression" "type_query" "generator_function_declaration" "decorator" "jsx_self_closing_element" "nested_identifier" "export_specifier" "generator_function" "augmented_assignment_expression" "arrow_function" "member_expression" "import_require_clause" "module" "primary_expression" "import_specifier" "jsx_closing_element" "jsx_opening_element" "function_declaration" "variable_declarator" "function_signature" "import_alias" "rest_pattern" "internal_module" "namespace_export" "pattern" "optional_parameter"))
   ("if_statement" ("statement"))
   ("implements_clause" ("class_heritage"))
   ("import" ("instantiation_expression" "primary_expression"))
   ("import_alias" ("declaration"))
   ("import_clause" ("import_statement"))
   ("import_require_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("index_signature" ("class_body" "object_type"))
   ("index_type_query" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("infer_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("instantiation_expression" ("type_query" "expression"))
   ("interface_declaration" ("declaration"))
   ("internal_module" ("declaration" "expression"))
   ("intersection_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("jsx_attribute" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_attribute" "jsx_self_closing_element" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_attribute" "jsx_self_closing_element" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("jsx_attribute" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("literal_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("lookup_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("mapped_type_clause" ("index_signature"))
   ("member_expression" ("for_in_statement" "member_expression" "primary_expression" "decorator" "jsx_self_closing_element" "type_query" "pattern" "nested_identifier" "jsx_closing_element" "jsx_opening_element" "assignment_expression" "instantiation_expression" "augmented_assignment_expression" "rest_pattern"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("method_signature" ("class_body" "object_type"))
   ("module" ("declaration"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("nested_identifier" ("module" "internal_module" "nested_type_identifier" "import_alias"))
   ("nested_type_identifier" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "generic_type" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "extends_type_clause" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("new_expression" ("expression"))
   ("non_null_expression" ("for_in_statement" "primary_expression" "pattern" "assignment_expression" "augmented_assignment_expression" "rest_pattern"))
   ("null" ("literal_type" "primary_expression"))
   ("number" ("abstract_method_signature" "primary_expression" "pair_pattern" "literal_type" "property_signature" "method_definition" "subscript_expression" "unary_expression" "pair" "enum_body" "public_field_definition" "enum_assignment" "method_signature"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("for_in_statement" "object_assignment_pattern" "catch_clause" "variable_declarator" "assignment_expression" "pattern" "rest_pattern"))
   ("object_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "interface_declaration" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("omitting_type_annotation" ("index_signature"))
   ("opting_type_annotation" ("index_signature"))
   ("optional_chain" ("member_expression" "subscript_expression"))
   ("optional_parameter" ("tuple_type" "formal_parameters"))
   ("optional_type" ("tuple_type"))
   ("override_modifier" ("property_signature" "method_definition" "required_parameter" "public_field_definition" "optional_parameter" "method_signature"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("for_in_statement" "if_statement" "primary_expression" "with_statement" "do_statement" "assignment_expression" "switch_statement" "augmented_assignment_expression" "while_statement"))
   ("parenthesized_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("pattern" ("assignment_pattern" "required_parameter" "array_pattern" "optional_parameter" "pair_pattern"))
   ("predefined_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "subscript_expression" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("member_expression" "abstract_method_signature" "pair_pattern" "property_signature" "method_definition" "pair" "enum_body" "public_field_definition" "enum_assignment" "method_signature"))
   ("property_identifier" ("member_expression" "jsx_attribute" "abstract_method_signature" "pair_pattern" "property_signature" "method_definition" "nested_identifier" "pair" "enum_body" "public_field_definition" "ambient_declaration" "enum_assignment" "method_signature"))
   ("property_signature" ("object_type"))
   ("public_field_definition" ("class_body"))
   ("readonly_type" ("conditional_type" "readonly_type" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "optional_type" "as_expression" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("required_parameter" ("tuple_type" "formal_parameters"))
   ("rest_pattern" ("required_parameter" "pattern" "object_pattern"))
   ("rest_type" ("tuple_type"))
   ("return_statement" ("statement"))
   ("satisfies_expression" ("expression"))
   ("sequence_expression" ("for_in_statement" "for_statement" "return_statement" "jsx_expression" "parenthesized_expression" "subscript_expression" "sequence_expression" "throw_statement" "template_substitution" "expression_statement" "switch_case"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("object" "arguments" "array" "jsx_expression"))
   ("statement" ("for_in_statement" "for_statement" "if_statement" "labeled_statement" "switch_default" "program" "else_clause" "with_statement" "statement_block" "do_statement" "while_statement" "switch_case"))
   ("statement_block" ("finally_clause" "generator_function_declaration" "module" "try_statement" "function" "method_definition" "statement" "catch_clause" "function_declaration" "ambient_declaration" "internal_module" "class_static_block" "arrow_function" "generator_function"))
   ("statement_identifier" ("break_statement" "continue_statement" "labeled_statement"))
   ("string" ("import_statement" "enum_body" "abstract_method_signature" "method_definition" "export_statement" "pair" "method_signature" "jsx_attribute" "property_signature" "subscript_expression" "export_specifier" "public_field_definition" "import_require_clause" "module" "primary_expression" "literal_type" "import_specifier" "internal_module" "namespace_export" "enum_assignment" "pair_pattern"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("for_in_statement" "primary_expression" "type_query" "pattern" "assignment_expression" "instantiation_expression" "augmented_assignment_expression" "rest_pattern"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_literal_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("template_type" ("template_literal_type"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression" "required_parameter" "type_predicate" "optional_parameter" "asserts"))
   ("this_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("throw_statement" ("statement"))
   ("true" ("literal_type" "primary_expression"))
   ("try_statement" ("statement"))
   ("tuple_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("type_alias_declaration" ("declaration"))
   ("type_annotation" ("function" "index_signature" "catch_clause" "required_parameter" "abstract_method_signature" "parenthesized_expression" "method_definition" "call_signature" "method_signature" "generator_function_declaration" "property_signature" "public_field_definition" "generator_function" "arrow_function" "variable_declarator" "function_declaration" "function_signature" "construct_signature" "optional_parameter"))
   ("type_arguments" ("type_assertion" "jsx_self_closing_element" "generic_type" "jsx_opening_element" "extends_clause" "new_expression" "call_expression" "instantiation_expression"))
   ("type_assertion" ("expression"))
   ("type_identifier" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "abstract_class_declaration" "type_predicate" "nested_type_identifier" "satisfies_expression" "interface_declaration" "constructor_type" "type_annotation" "generic_type" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "extends_type_clause" "class" "class_declaration" "as_expression" "type_parameter" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("type_parameter" ("type_parameters"))
   ("type_parameters" ("generator_function_declaration" "construct_signature" "abstract_method_signature" "interface_declaration" "constructor_type" "function" "type_alias_declaration" "method_definition" "function_declaration" "function_signature" "method_signature" "function_type" "abstract_class_declaration" "generator_function" "arrow_function" "call_signature" "class" "class_declaration"))
   ("type_predicate" ("type_predicate_annotation" "function_type" "asserts"))
   ("type_predicate_annotation" ("generator_function_declaration" "abstract_method_signature" "function" "method_definition" "function_declaration" "function_signature" "generator_function" "arrow_function" "call_signature" "method_signature"))
   ("type_query" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("unary_expression" ("literal_type" "expression"))
   ("undefined" ("for_in_statement" "primary_expression" "literal_type" "assignment_expression" "pattern" "rest_pattern"))
   ("union_type" ("conditional_type" "readonly_type" "index_type_query" "omitting_type_annotation" "type_alias_declaration" "index_signature" "implements_clause" "lookup_type" "_primary_type" "intersection_type" "type_predicate" "satisfies_expression" "constructor_type" "type_annotation" "tuple_type" "infer_type" "parenthesized_type" "flow_maybe_type" "opting_type_annotation" "type_arguments" "union_type" "constraint" "function_type" "template_type" "optional_type" "as_expression" "array_type" "rest_type" "ambient_declaration" "default_type" "mapped_type_clause"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for typescript
;; START All node types in typescript
(defconst combobulate-rules-typescript-types 
 '("_primary_type" "abstract_class_declaration" "abstract_method_signature" "accessibility_modifier" "ambient_declaration" "arguments" "array" "array_pattern" "array_type" "arrow_function" "as_expression" "asserts" "asserts_annotation" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "call_signature" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "conditional_type" "constraint" "construct_signature" "constructor_type" "continue_statement" "debugger_statement" "declaration" "decorator" "default_type" "do_statement" "else_clause" "empty_statement" "enum_assignment" "enum_body" "enum_declaration" "escape_sequence" "existential_type" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "extends_clause" "extends_type_clause" "false" "finally_clause" "flow_maybe_type" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "function_signature" "function_type" "generator_function" "generator_function_declaration" "generic_type" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "implements_clause" "import" "import_alias" "import_clause" "import_require_clause" "import_specifier" "import_statement" "index_signature" "index_type_query" "infer_type" "instantiation_expression" "interface_declaration" "internal_module" "intersection_type" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "literal_type" "lookup_type" "mapped_type_clause" "member_expression" "meta_property" "method_definition" "method_signature" "module" "named_imports" "namespace_export" "namespace_import" "nested_identifier" "nested_type_identifier" "new_expression" "non_null_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "object_type" "omitting_type_annotation" "opting_type_annotation" "optional_chain" "optional_parameter" "optional_type" "override_modifier" "pair" "pair_pattern" "parenthesized_expression" "parenthesized_type" "pattern" "predefined_type" "primary_expression" "private_property_identifier" "program" "property_identifier" "property_signature" "public_field_definition" "readonly_type" "regex" "regex_flags" "regex_pattern" "required_parameter" "rest_pattern" "rest_type" "return_statement" "satisfies_expression" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_literal_type" "template_string" "template_substitution" "template_type" "ternary_expression" "this" "this_type" "throw_statement" "true" "try_statement" "tuple_type" "type_alias_declaration" "type_annotation" "type_arguments" "type_assertion" "type_identifier" "type_parameter" "type_parameters" "type_predicate" "type_predicate_annotation" "type_query" "unary_expression" "undefined" "union_type" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in typescript
;; START All supertypes in typescript
(defconst combobulate-rules-typescript-supertypes 
 '("_primary_type" "declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in typescript

;; START Production rules for javascript
(defconst combobulate-rules-javascript 
 '(("arguments" (:*unnamed* ("spread_element" "expression"))) 
 ("array" (:*unnamed* ("spread_element" "expression"))) 
 ("array_pattern" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("arrow_function" (:*unnamed* nil :body ("statement_block" "expression") :parameter ("identifier") :parameters ("formal_parameters"))) 
 ("assignment_expression" (:*unnamed* nil :left ("member_expression" "identifier" "undefined" "object_pattern" "array_pattern" "parenthesized_expression" "subscript_expression") :right ("expression"))) 
 ("assignment_pattern" (:*unnamed* nil :left ("pattern") :right ("expression"))) 
 ("augmented_assignment_expression" (:*unnamed* nil :left ("identifier" "subscript_expression" "member_expression" "parenthesized_expression") :operator nil :right ("expression"))) 
 ("await_expression" (:*unnamed* ("expression"))) 
 ("binary_expression" (:*unnamed* nil :left ("private_property_identifier" "expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("call_expression" (:*unnamed* nil :arguments ("template_string" "arguments") :function ("expression") :optional_chain ("optional_chain"))) 
 ("catch_clause" (:*unnamed* nil :body ("statement_block") :parameter ("array_pattern" "identifier" "object_pattern"))) 
 ("class" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_body" (:*unnamed* nil :member ("class_static_block" "field_definition" "method_definition") :template ("glimmer_template"))) 
 ("class_declaration" (:*unnamed* ("class_heritage") :body ("class_body") :decorator ("decorator") :name ("identifier"))) 
 ("class_heritage" (:*unnamed* ("expression"))) 
 ("class_static_block" (:*unnamed* nil :body ("statement_block"))) 
 ("comment" (:*unnamed* nil)) 
 ("computed_property_name" (:*unnamed* ("expression"))) 
 ("continue_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("debugger_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("generator_function_declaration" "function_declaration" "variable_declaration" "lexical_declaration" "class_declaration"))) 
 ("decorator" (:*unnamed* ("call_expression" "identifier" "member_expression"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("export_clause" (:*unnamed* ("export_specifier"))) 
 ("export_specifier" (:*unnamed* nil :alias ("identifier" "string") :name ("identifier" "string"))) 
 ("export_statement" (:*unnamed* ("export_clause" "namespace_export") :declaration ("declaration") :decorator ("decorator") :source ("string") :value ("expression"))) 
 ("expression" (:*unnamed* ("glimmer_template" "primary_expression" "jsx_self_closing_element" "update_expression" "unary_expression" "binary_expression" "await_expression" "assignment_expression" "new_expression" "ternary_expression" "augmented_assignment_expression" "yield_expression" "jsx_element"))) 
 ("expression_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_definition" (:*unnamed* nil :decorator ("decorator") :property ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("expression"))) 
 ("finally_clause" (:*unnamed* nil :body ("statement_block"))) 
 ("for_in_statement" (:*unnamed* nil :body ("statement") :kind nil :left ("member_expression" "identifier" "undefined" "object_pattern" "array_pattern" "parenthesized_expression" "subscript_expression") :operator nil :right ("expression" "sequence_expression") :value ("expression"))) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("expression_statement" "empty_statement") :increment ("expression" "sequence_expression") :initializer ("expression_statement" "empty_statement" "lexical_declaration" "variable_declaration"))) 
 ("formal_parameters" (:*unnamed* ("assignment_pattern" "pattern"))) 
 ("function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("generator_function_declaration" (:*unnamed* nil :body ("statement_block") :name ("identifier") :parameters ("formal_parameters"))) 
 ("glimmer_closing_tag" (:*unnamed* nil)) 
 ("glimmer_opening_tag" (:*unnamed* nil)) 
 ("glimmer_template" (:*unnamed* nil :close_tag ("glimmer_closing_tag") :open_tag ("glimmer_opening_tag"))) 
 ("hash_bang_line" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("import" (:*unnamed* nil)) 
 ("import_clause" (:*unnamed* ("identifier" "namespace_import" "named_imports"))) 
 ("import_specifier" (:*unnamed* nil :alias ("identifier") :name ("identifier" "string"))) 
 ("import_statement" (:*unnamed* ("import_clause") :source ("string"))) 
 ("jsx_attribute" (:*unnamed* ("jsx_namespace_name" "property_identifier" "jsx_expression" "string" "jsx_self_closing_element" "jsx_element"))) 
 ("jsx_closing_element" (:*unnamed* nil :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_element" (:*unnamed* ("jsx_self_closing_element" "jsx_text" "jsx_expression" "jsx_element") :close_tag ("jsx_closing_element") :open_tag ("jsx_opening_element"))) 
 ("jsx_expression" (:*unnamed* ("spread_element" "expression" "sequence_expression"))) 
 ("jsx_namespace_name" (:*unnamed* ("identifier"))) 
 ("jsx_opening_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_self_closing_element" (:*unnamed* nil :attribute ("jsx_attribute" "jsx_expression") :name ("identifier" "jsx_namespace_name" "member_expression"))) 
 ("jsx_text" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* nil :body ("statement") :label ("statement_identifier"))) 
 ("lexical_declaration" (:*unnamed* ("variable_declarator") :kind nil)) 
 ("member_expression" (:*unnamed* ("identifier" "property_identifier" "member_expression") :object ("expression") :optional_chain ("optional_chain") :property ("private_property_identifier" "property_identifier"))) 
 ("meta_property" (:*unnamed* nil)) 
 ("method_definition" (:*unnamed* nil :body ("statement_block") :decorator ("decorator") :name ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :parameters ("formal_parameters"))) 
 ("named_imports" (:*unnamed* ("import_specifier"))) 
 ("namespace_export" (:*unnamed* ("identifier" "string"))) 
 ("namespace_import" (:*unnamed* ("identifier"))) 
 ("new_expression" (:*unnamed* nil :arguments ("arguments") :constructor ("primary_expression" "new_expression"))) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("method_definition" "spread_element" "pair" "shorthand_property_identifier"))) 
 ("object_assignment_pattern" (:*unnamed* nil :left ("array_pattern" "object_pattern" "shorthand_property_identifier_pattern") :right ("expression"))) 
 ("object_pattern" (:*unnamed* ("rest_pattern" "object_assignment_pattern" "pair_pattern" "shorthand_property_identifier_pattern"))) 
 ("optional_chain" (:*unnamed* nil)) 
 ("pair" (:*unnamed* nil :key ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("expression"))) 
 ("pair_pattern" (:*unnamed* nil :key ("private_property_identifier" "property_identifier" "computed_property_name" "string" "number") :value ("assignment_pattern" "pattern"))) 
 ("parenthesized_expression" (:*unnamed* ("expression" "sequence_expression"))) 
 ("pattern" (:*unnamed* ("member_expression" "undefined" "object_pattern" "array_pattern" "identifier" "subscript_expression" "rest_pattern"))) 
 ("primary_expression" (:*unnamed* ("false" "undefined" "function" "object" "template_string" "import" "regex" "subscript_expression" "array" "call_expression" "string" "generator_function" "arrow_function" "class" "this" "true" "member_expression" "super" "null" "parenthesized_expression" "meta_property" "identifier" "number"))) 
 ("private_property_identifier" (:*unnamed* nil)) 
 ("program" (:*unnamed* ("hash_bang_line" "statement"))) 
 ("property_identifier" (:*unnamed* nil)) 
 ("regex" (:*unnamed* nil :flags ("regex_flags") :pattern ("regex_pattern"))) 
 ("regex_flags" (:*unnamed* nil)) 
 ("regex_pattern" (:*unnamed* nil)) 
 ("rest_pattern" (:*unnamed* ("member_expression" "undefined" "object_pattern" "array_pattern" "identifier" "subscript_expression"))) 
 ("return_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("sequence_expression" (:*unnamed* nil :left ("expression") :right ("expression" "sequence_expression"))) 
 ("shorthand_property_identifier" (:*unnamed* nil)) 
 ("shorthand_property_identifier_pattern" (:*unnamed* nil)) 
 ("spread_element" (:*unnamed* ("expression"))) 
 ("statement" (:*unnamed* ("for_in_statement" "if_statement" "for_statement" "labeled_statement" "with_statement" "import_statement" "throw_statement" "statement_block" "declaration" "continue_statement" "empty_statement" "while_statement" "return_statement" "try_statement" "debugger_statement" "export_statement" "break_statement" "do_statement" "switch_statement" "expression_statement"))) 
 ("statement_block" (:*unnamed* ("statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("string" (:*unnamed* ("string_fragment" "escape_sequence"))) 
 ("string_fragment" (:*unnamed* nil)) 
 ("subscript_expression" (:*unnamed* nil :index ("expression" "sequence_expression") :object ("expression") :optional_chain ("optional_chain"))) 
 ("super" (:*unnamed* nil)) 
 ("switch_body" (:*unnamed* ("switch_default" "switch_case"))) 
 ("switch_case" (:*unnamed* nil :body ("statement") :value ("expression" "sequence_expression"))) 
 ("switch_default" (:*unnamed* nil :body ("statement"))) 
 ("switch_statement" (:*unnamed* nil :body ("switch_body") :value ("parenthesized_expression"))) 
 ("template_string" (:*unnamed* ("template_substitution" "escape_sequence"))) 
 ("template_substitution" (:*unnamed* ("expression" "sequence_expression"))) 
 ("ternary_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("expression"))) 
 ("this" (:*unnamed* nil)) 
 ("throw_statement" (:*unnamed* ("expression" "sequence_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* nil :body ("statement_block") :finalizer ("finally_clause") :handler ("catch_clause"))) 
 ("unary_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("undefined" (:*unnamed* nil)) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variable_declaration" (:*unnamed* ("variable_declarator"))) 
 ("variable_declarator" (:*unnamed* nil :name ("array_pattern" "identifier" "object_pattern") :value ("expression"))) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("with_statement" (:*unnamed* nil :body ("statement") :object ("parenthesized_expression"))) 
 ("yield_expression" (:*unnamed* ("expression"))) 
))
;; END Production rules for javascript
;; START Inverse production rules for javascript
(defconst combobulate-rules-javascript-inverse 
 '(("arguments" ("call_expression" "new_expression"))
   ("array" ("primary_expression"))
   ("array_pattern" ("for_in_statement" "object_assignment_pattern" "catch_clause" "variable_declarator" "assignment_expression" "pattern" "rest_pattern"))
   ("arrow_function" ("primary_expression"))
   ("assignment_expression" ("expression"))
   ("assignment_pattern" ("array_pattern" "pair_pattern" "formal_parameters"))
   ("augmented_assignment_expression" ("expression"))
   ("await_expression" ("expression"))
   ("binary_expression" ("expression"))
   ("break_statement" ("statement"))
   ("call_expression" ("primary_expression" "decorator"))
   ("catch_clause" ("try_statement"))
   ("class" ("primary_expression"))
   ("class_body" ("class" "class_declaration"))
   ("class_declaration" ("declaration"))
   ("class_heritage" ("class" "class_declaration"))
   ("class_static_block" ("class_body"))
   ("computed_property_name" ("field_definition" "method_definition" "pair" "pair_pattern"))
   ("continue_statement" ("statement"))
   ("debugger_statement" ("statement"))
   ("declaration" ("export_statement" "statement"))
   ("decorator" ("method_definition" "field_definition" "export_statement" "class" "class_declaration"))
   ("do_statement" ("statement"))
   ("else_clause" ("if_statement"))
   ("empty_statement" ("for_statement" "statement"))
   ("escape_sequence" ("string" "template_string"))
   ("export_clause" ("export_statement"))
   ("export_specifier" ("export_clause"))
   ("export_statement" ("statement"))
   ("expression" ("for_in_statement" "arguments" "jsx_expression" "unary_expression" "sequence_expression" "throw_statement" "await_expression" "call_expression" "return_statement" "parenthesized_expression" "class_heritage" "export_statement" "binary_expression" "pair" "assignment_expression" "ternary_expression" "for_statement" "object_assignment_pattern" "assignment_pattern" "subscript_expression" "field_definition" "array" "template_substitution" "augmented_assignment_expression" "arrow_function" "yield_expression" "member_expression" "spread_element" "update_expression" "variable_declarator" "computed_property_name" "expression_statement" "switch_case"))
   ("expression_statement" ("for_statement" "statement"))
   ("false" ("primary_expression"))
   ("field_definition" ("class_body"))
   ("finally_clause" ("try_statement"))
   ("for_in_statement" ("statement"))
   ("for_statement" ("statement"))
   ("formal_parameters" ("generator_function_declaration" "function" "method_definition" "function_declaration" "generator_function" "arrow_function"))
   ("function" ("primary_expression"))
   ("function_declaration" ("declaration"))
   ("generator_function" ("primary_expression"))
   ("generator_function_declaration" ("declaration"))
   ("glimmer_closing_tag" ("glimmer_template"))
   ("glimmer_opening_tag" ("glimmer_template"))
   ("glimmer_template" ("class_body" "expression"))
   ("hash_bang_line" ("program"))
   ("identifier" ("for_in_statement" "function" "catch_clause" "jsx_namespace_name" "namespace_import" "import_clause" "assignment_expression" "generator_function_declaration" "decorator" "jsx_self_closing_element" "export_specifier" "generator_function" "augmented_assignment_expression" "arrow_function" "class" "class_declaration" "member_expression" "primary_expression" "import_specifier" "jsx_closing_element" "jsx_opening_element" "function_declaration" "variable_declarator" "namespace_export" "pattern" "rest_pattern"))
   ("if_statement" ("statement"))
   ("import" ("primary_expression"))
   ("import_clause" ("import_statement"))
   ("import_specifier" ("named_imports"))
   ("import_statement" ("statement"))
   ("jsx_attribute" ("jsx_opening_element" "jsx_self_closing_element"))
   ("jsx_closing_element" ("jsx_element"))
   ("jsx_element" ("jsx_attribute" "expression" "jsx_element"))
   ("jsx_expression" ("jsx_opening_element" "jsx_attribute" "jsx_self_closing_element" "jsx_element"))
   ("jsx_namespace_name" ("jsx_opening_element" "jsx_attribute" "jsx_self_closing_element" "jsx_closing_element"))
   ("jsx_opening_element" ("jsx_element"))
   ("jsx_self_closing_element" ("jsx_attribute" "expression" "jsx_element"))
   ("jsx_text" ("jsx_element"))
   ("labeled_statement" ("statement"))
   ("lexical_declaration" ("for_statement" "declaration"))
   ("member_expression" ("for_in_statement" "member_expression" "primary_expression" "decorator" "jsx_self_closing_element" "pattern" "jsx_closing_element" "jsx_opening_element" "assignment_expression" "augmented_assignment_expression" "rest_pattern"))
   ("meta_property" ("primary_expression"))
   ("method_definition" ("class_body" "object"))
   ("named_imports" ("import_clause"))
   ("namespace_export" ("export_statement"))
   ("namespace_import" ("import_clause"))
   ("new_expression" ("expression" "new_expression"))
   ("null" ("primary_expression"))
   ("number" ("primary_expression" "method_definition" "field_definition" "pair" "pair_pattern"))
   ("object" ("primary_expression"))
   ("object_assignment_pattern" ("object_pattern"))
   ("object_pattern" ("for_in_statement" "object_assignment_pattern" "catch_clause" "variable_declarator" "assignment_expression" "pattern" "rest_pattern"))
   ("optional_chain" ("call_expression" "subscript_expression" "member_expression"))
   ("pair" ("object"))
   ("pair_pattern" ("object_pattern"))
   ("parenthesized_expression" ("for_in_statement" "if_statement" "primary_expression" "with_statement" "do_statement" "assignment_expression" "switch_statement" "augmented_assignment_expression" "while_statement"))
   ("pattern" ("array_pattern" "assignment_pattern" "pair_pattern" "formal_parameters"))
   ("primary_expression" ("expression" "new_expression"))
   ("private_property_identifier" ("member_expression" "method_definition" "field_definition" "binary_expression" "pair" "pair_pattern"))
   ("property_identifier" ("member_expression" "jsx_attribute" "method_definition" "field_definition" "pair" "pair_pattern"))
   ("regex" ("primary_expression"))
   ("regex_flags" ("regex"))
   ("regex_pattern" ("regex"))
   ("rest_pattern" ("pattern" "object_pattern"))
   ("return_statement" ("statement"))
   ("sequence_expression" ("for_in_statement" "for_statement" "return_statement" "jsx_expression" "parenthesized_expression" "subscript_expression" "sequence_expression" "throw_statement" "template_substitution" "expression_statement" "switch_case"))
   ("shorthand_property_identifier" ("object"))
   ("shorthand_property_identifier_pattern" ("object_assignment_pattern" "object_pattern"))
   ("spread_element" ("object" "arguments" "array" "jsx_expression"))
   ("statement" ("for_in_statement" "for_statement" "if_statement" "labeled_statement" "switch_default" "program" "else_clause" "with_statement" "statement_block" "do_statement" "while_statement" "switch_case"))
   ("statement_block" ("finally_clause" "generator_function_declaration" "try_statement" "function" "method_definition" "statement" "catch_clause" "function_declaration" "class_static_block" "arrow_function" "generator_function"))
   ("statement_identifier" ("break_statement" "continue_statement" "labeled_statement"))
   ("string" ("jsx_attribute" "primary_expression" "method_definition" "import_specifier" "import_statement" "export_specifier" "field_definition" "export_statement" "pair" "namespace_export" "pair_pattern"))
   ("string_fragment" ("string"))
   ("subscript_expression" ("for_in_statement" "primary_expression" "pattern" "assignment_expression" "augmented_assignment_expression" "rest_pattern"))
   ("super" ("primary_expression"))
   ("switch_body" ("switch_statement"))
   ("switch_case" ("switch_body"))
   ("switch_default" ("switch_body"))
   ("switch_statement" ("statement"))
   ("template_string" ("call_expression" "primary_expression"))
   ("template_substitution" ("template_string"))
   ("ternary_expression" ("expression"))
   ("this" ("primary_expression"))
   ("throw_statement" ("statement"))
   ("true" ("primary_expression"))
   ("try_statement" ("statement"))
   ("unary_expression" ("expression"))
   ("undefined" ("for_in_statement" "primary_expression" "assignment_expression" "pattern" "rest_pattern"))
   ("update_expression" ("expression"))
   ("variable_declaration" ("for_statement" "declaration"))
   ("variable_declarator" ("lexical_declaration" "variable_declaration"))
   ("while_statement" ("statement"))
   ("with_statement" ("statement"))
   ("yield_expression" ("expression"))
  ) 
)
;; END Inverse production rules for javascript
;; START All node types in javascript
(defconst combobulate-rules-javascript-types 
 '("arguments" "array" "array_pattern" "arrow_function" "assignment_expression" "assignment_pattern" "augmented_assignment_expression" "await_expression" "binary_expression" "break_statement" "call_expression" "catch_clause" "class" "class_body" "class_declaration" "class_heritage" "class_static_block" "comment" "computed_property_name" "continue_statement" "debugger_statement" "declaration" "decorator" "do_statement" "else_clause" "empty_statement" "escape_sequence" "export_clause" "export_specifier" "export_statement" "expression" "expression_statement" "false" "field_definition" "finally_clause" "for_in_statement" "for_statement" "formal_parameters" "function" "function_declaration" "generator_function" "generator_function_declaration" "glimmer_closing_tag" "glimmer_opening_tag" "glimmer_template" "hash_bang_line" "identifier" "if_statement" "import" "import_clause" "import_specifier" "import_statement" "jsx_attribute" "jsx_closing_element" "jsx_element" "jsx_expression" "jsx_namespace_name" "jsx_opening_element" "jsx_self_closing_element" "jsx_text" "labeled_statement" "lexical_declaration" "member_expression" "meta_property" "method_definition" "named_imports" "namespace_export" "namespace_import" "new_expression" "null" "number" "object" "object_assignment_pattern" "object_pattern" "optional_chain" "pair" "pair_pattern" "parenthesized_expression" "pattern" "primary_expression" "private_property_identifier" "program" "property_identifier" "regex" "regex_flags" "regex_pattern" "rest_pattern" "return_statement" "sequence_expression" "shorthand_property_identifier" "shorthand_property_identifier_pattern" "spread_element" "statement" "statement_block" "statement_identifier" "string" "string_fragment" "subscript_expression" "super" "switch_body" "switch_case" "switch_default" "switch_statement" "template_string" "template_substitution" "ternary_expression" "this" "throw_statement" "true" "try_statement" "unary_expression" "undefined" "update_expression" "variable_declaration" "variable_declarator" "while_statement" "with_statement" "yield_expression") 
)
;; END All node types in javascript
;; START All supertypes in javascript
(defconst combobulate-rules-javascript-supertypes 
 '("declaration" "expression" "pattern" "primary_expression" "statement") 
)
;; END All supertypes in javascript

;; START Production rules for go
(defconst combobulate-rules-go 
 '(("_expression" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("_simple_statement" (:*unnamed* ("dec_statement" "inc_statement" "short_var_declaration" "assignment_statement" "expression_statement" "send_statement"))) 
 ("_simple_type" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "pointer_type" "channel_type"))) 
 ("_statement" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement"))) 
 ("_type" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("argument_list" (:*unnamed* ("negated_type" "unary_expression" "slice_type" "call_expression" "channel_type" "nil" "true" "iota" "parenthesized_expression" "generic_type" "binary_expression" "parenthesized_type" "variadic_argument" "identifier" "type_conversion_expression" "interpreted_string_literal" "imaginary_literal" "type_identifier" "false" "union_type" "rune_literal" "index_expression" "type_assertion_expression" "int_literal" "map_type" "struct_type" "function_type" "slice_expression" "pointer_type" "func_literal" "raw_string_literal" "qualified_type" "float_literal" "array_type" "interface_type" "selector_expression" "composite_literal"))) 
 ("array_type" (:*unnamed* nil :element ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type") :length ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("assignment_statement" (:*unnamed* nil :left ("expression_list") :operator nil :right ("expression_list"))) 
 ("binary_expression" (:*unnamed* nil :left ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :operator nil :right ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("blank_identifier" (:*unnamed* nil)) 
 ("block" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement"))) 
 ("break_statement" (:*unnamed* ("label_name"))) 
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :type_arguments ("type_arguments"))) 
 ("channel_type" (:*unnamed* nil :value ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("comment" (:*unnamed* nil)) 
 ("communication_case" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement") :communication ("receive_statement" "send_statement"))) 
 ("composite_literal" (:*unnamed* nil :body ("literal_value") :type ("implicit_length_array_type" "type_identifier" "qualified_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type"))) 
 ("const_declaration" (:*unnamed* ("const_spec"))) 
 ("const_spec" (:*unnamed* nil :name ("identifier") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type") :value ("expression_list"))) 
 ("continue_statement" (:*unnamed* ("label_name"))) 
 ("dec_statement" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("default_case" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement"))) 
 ("defer_statement" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("dot" (:*unnamed* nil)) 
 ("empty_statement" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expression_case" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement") :value ("expression_list"))) 
 ("expression_list" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("expression_statement" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("expression_switch_statement" (:*unnamed* ("expression_case" "default_case") :initializer ("dec_statement" "inc_statement" "short_var_declaration" "assignment_statement" "expression_statement" "send_statement") :value ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("fallthrough_statement" (:*unnamed* nil)) 
 ("false" (:*unnamed* nil)) 
 ("field_declaration" (:*unnamed* nil :name ("field_identifier") :tag ("interpreted_string_literal" "raw_string_literal") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("field_declaration_list" (:*unnamed* ("field_declaration"))) 
 ("field_identifier" (:*unnamed* nil)) 
 ("float_literal" (:*unnamed* nil)) 
 ("for_clause" (:*unnamed* nil :condition ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :initializer ("dec_statement" "inc_statement" "short_var_declaration" "assignment_statement" "expression_statement" "send_statement") :update ("dec_statement" "inc_statement" "short_var_declaration" "assignment_statement" "expression_statement" "send_statement"))) 
 ("for_statement" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "for_clause" "nil" "true" "func_literal" "iota" "raw_string_literal" "range_clause" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :body ("block"))) 
 ("func_literal" (:*unnamed* nil :body ("block") :parameters ("parameter_list") :result ("parameter_list" "type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "pointer_type" "channel_type"))) 
 ("function_declaration" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameter_list") :result ("parameter_list" "type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "pointer_type" "channel_type") :type_parameters ("type_parameter_list"))) 
 ("function_type" (:*unnamed* nil :parameters ("parameter_list") :result ("parameter_list" "type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "pointer_type" "channel_type"))) 
 ("generic_type" (:*unnamed* nil :type ("type_identifier" "qualified_type" "union_type" "negated_type") :type_arguments ("type_arguments"))) 
 ("go_statement" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("goto_statement" (:*unnamed* ("label_name"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("if_statement" "block") :condition ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :consequence ("block") :initializer ("dec_statement" "inc_statement" "short_var_declaration" "assignment_statement" "expression_statement" "send_statement"))) 
 ("imaginary_literal" (:*unnamed* nil)) 
 ("implicit_length_array_type" (:*unnamed* nil :element ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("import_declaration" (:*unnamed* ("import_spec" "import_spec_list"))) 
 ("import_spec" (:*unnamed* nil :name ("dot" "blank_identifier" "package_identifier") :path ("interpreted_string_literal" "raw_string_literal"))) 
 ("import_spec_list" (:*unnamed* ("import_spec"))) 
 ("inc_statement" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("index_expression" (:*unnamed* nil :index ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :operand ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("int_literal" (:*unnamed* nil)) 
 ("interface_type" (:*unnamed* ("constraint_elem" "method_spec" "struct_elem"))) 
 ("interpreted_string_literal" (:*unnamed* ("escape_sequence"))) 
 ("iota" (:*unnamed* nil)) 
 ("keyed_element" (:*unnamed* ("literal_element"))) 
 ("label_name" (:*unnamed* nil)) 
 ("labeled_statement" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement") :label ("label_name"))) 
 ("literal_element" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "literal_value" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("literal_value" (:*unnamed* ("literal_element" "keyed_element"))) 
 ("map_type" (:*unnamed* nil :key ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type") :value ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("method_declaration" (:*unnamed* nil :body ("block") :name ("field_identifier") :parameters ("parameter_list") :receiver ("parameter_list") :result ("parameter_list" "type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "pointer_type" "channel_type"))) 
 ("method_spec" (:*unnamed* nil :name ("field_identifier") :parameters ("parameter_list") :result ("parameter_list" "type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "pointer_type" "channel_type"))) 
 ("negated_type" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("nil" (:*unnamed* nil)) 
 ("package_clause" (:*unnamed* ("package_identifier"))) 
 ("package_identifier" (:*unnamed* nil)) 
 ("parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("parameter_list" (:*unnamed* ("variadic_parameter_declaration" "parameter_declaration"))) 
 ("parenthesized_expression" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("parenthesized_type" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("pointer_type" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("qualified_type" (:*unnamed* nil :name ("type_identifier") :package ("package_identifier"))) 
 ("range_clause" (:*unnamed* nil :left ("expression_list") :right ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("raw_string_literal" (:*unnamed* nil)) 
 ("receive_statement" (:*unnamed* nil :left ("expression_list") :right ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("return_statement" (:*unnamed* ("expression_list"))) 
 ("rune_literal" (:*unnamed* nil)) 
 ("select_statement" (:*unnamed* ("communication_case" "default_case"))) 
 ("selector_expression" (:*unnamed* nil :field ("field_identifier") :operand ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("send_statement" (:*unnamed* nil :channel ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :value ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("short_var_declaration" (:*unnamed* nil :left ("expression_list") :right ("expression_list"))) 
 ("slice_expression" (:*unnamed* nil :capacity ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :end ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :operand ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :start ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("slice_type" (:*unnamed* nil :element ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("source_file" (:*unnamed* ("if_statement" "for_statement" "package_clause" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "import_declaration" "method_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "function_declaration" "expression_statement"))) 
 ("struct_elem" (:*unnamed* ("struct_term"))) 
 ("struct_term" (:*unnamed* ("struct_type"))) 
 ("struct_type" (:*unnamed* ("field_declaration_list"))) 
 ("true" (:*unnamed* nil)) 
 ("type_alias" (:*unnamed* nil :name ("type_identifier") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("type_arguments" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("type_assertion_expression" (:*unnamed* nil :operand ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("type_case" (:*unnamed* ("if_statement" "for_statement" "inc_statement" "labeled_statement" "expression_switch_statement" "short_var_declaration" "assignment_statement" "go_statement" "type_declaration" "type_switch_statement" "fallthrough_statement" "continue_statement" "empty_statement" "goto_statement" "select_statement" "var_declaration" "return_statement" "block" "send_statement" "dec_statement" "defer_statement" "const_declaration" "break_statement" "expression_statement") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("type_conversion_expression" (:*unnamed* nil :operand ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("type_declaration" (:*unnamed* ("type_alias" "type_spec"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_parameter_list" (:*unnamed* ("parameter_declaration"))) 
 ("type_spec" (:*unnamed* nil :name ("type_identifier") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type") :type_parameters ("type_parameter_list"))) 
 ("type_switch_statement" (:*unnamed* ("type_case" "default_case") :alias ("expression_list") :initializer ("dec_statement" "inc_statement" "short_var_declaration" "assignment_statement" "expression_statement" "send_statement") :value ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("unary_expression" (:*unnamed* nil :operand ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal") :operator nil)) 
 ("union_type" (:*unnamed* ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
 ("var_declaration" (:*unnamed* ("var_spec"))) 
 ("var_spec" (:*unnamed* nil :name ("identifier") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type") :value ("expression_list"))) 
 ("variadic_argument" (:*unnamed* ("false" "rune_literal" "index_expression" "unary_expression" "type_assertion_expression" "int_literal" "type_conversion_expression" "call_expression" "slice_expression" "nil" "true" "func_literal" "iota" "raw_string_literal" "float_literal" "parenthesized_expression" "composite_literal" "binary_expression" "selector_expression" "identifier" "interpreted_string_literal" "imaginary_literal"))) 
 ("variadic_parameter_declaration" (:*unnamed* nil :name ("identifier") :type ("type_identifier" "qualified_type" "union_type" "negated_type" "generic_type" "map_type" "array_type" "slice_type" "struct_type" "interface_type" "function_type" "parenthesized_type" "pointer_type" "channel_type"))) 
))
;; END Production rules for go
;; START Inverse production rules for go
(defconst combobulate-rules-go-inverse 
 '(("argument_list" ("call_expression"))
   ("array_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("assignment_statement" ("if_statement" "labeled_statement" "block" "expression_switch_statement" "source_file" "_simple_statement" "default_case" "_statement" "type_switch_statement" "communication_case" "for_clause" "expression_case" "type_case"))
   ("binary_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("blank_identifier" ("import_spec"))
   ("block" ("if_statement" "for_statement" "func_literal" "labeled_statement" "block" "source_file" "default_case" "_statement" "method_declaration" "function_declaration" "communication_case" "expression_case" "type_case"))
   ("break_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("call_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("channel_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "type_case"))
   ("communication_case" ("select_statement"))
   ("composite_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("const_declaration" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("const_spec" ("const_declaration"))
   ("constraint_elem" ("interface_type"))
   ("continue_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("dec_statement" ("if_statement" "labeled_statement" "block" "expression_switch_statement" "source_file" "_simple_statement" "default_case" "_statement" "type_switch_statement" "communication_case" "for_clause" "expression_case" "type_case"))
   ("default_case" ("type_switch_statement" "expression_switch_statement" "select_statement"))
   ("defer_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("dot" ("import_spec"))
   ("empty_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("escape_sequence" ("interpreted_string_literal"))
   ("expression_case" ("expression_switch_statement"))
   ("expression_list" ("const_spec" "return_statement" "range_clause" "receive_statement" "var_spec" "short_var_declaration" "assignment_statement" "type_switch_statement" "expression_case"))
   ("expression_statement" ("if_statement" "labeled_statement" "block" "expression_switch_statement" "source_file" "_simple_statement" "default_case" "_statement" "type_switch_statement" "communication_case" "for_clause" "expression_case" "type_case"))
   ("expression_switch_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("fallthrough_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("false" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("field_declaration" ("field_declaration_list"))
   ("field_declaration_list" ("struct_type"))
   ("field_identifier" ("method_declaration" "method_spec" "selector_expression" "field_declaration"))
   ("float_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("for_clause" ("for_statement"))
   ("for_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("func_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("function_declaration" ("source_file"))
   ("function_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "type_case"))
   ("generic_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("go_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("goto_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("identifier" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "parameter_declaration" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "const_spec" "variadic_parameter_declaration" "receive_statement" "var_spec" "send_statement" "dec_statement" "array_type" "defer_statement" "function_declaration" "selector_expression" "expression_statement"))
   ("if_statement" ("if_statement" "labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("imaginary_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("implicit_length_array_type" ("composite_literal"))
   ("import_declaration" ("source_file"))
   ("import_spec" ("import_spec_list" "import_declaration"))
   ("import_spec_list" ("import_declaration"))
   ("inc_statement" ("if_statement" "labeled_statement" "block" "expression_switch_statement" "source_file" "_simple_statement" "default_case" "_statement" "type_switch_statement" "communication_case" "for_clause" "expression_case" "type_case"))
   ("index_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("int_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("interface_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "type_case"))
   ("interpreted_string_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "field_declaration" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "import_spec" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("iota" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("keyed_element" ("literal_value"))
   ("label_name" ("break_statement" "continue_statement" "labeled_statement" "goto_statement"))
   ("labeled_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("literal_element" ("literal_value" "keyed_element"))
   ("literal_value" ("composite_literal" "literal_element"))
   ("map_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("method_declaration" ("source_file"))
   ("method_spec" ("interface_type"))
   ("negated_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "generic_type" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "type_case"))
   ("nil" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("package_clause" ("source_file"))
   ("package_identifier" ("import_spec" "qualified_type" "package_clause"))
   ("parameter_declaration" ("parameter_list" "type_parameter_list"))
   ("parameter_list" ("method_spec" "func_literal" "method_declaration" "function_declaration" "function_type"))
   ("parenthesized_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("parenthesized_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "pointer_type" "const_spec" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "array_type" "type_case"))
   ("pointer_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "type_case"))
   ("qualified_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "generic_type" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("range_clause" ("for_statement"))
   ("raw_string_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "field_declaration" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "import_spec" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("receive_statement" ("communication_case"))
   ("return_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("rune_literal" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("select_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("selector_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("send_statement" ("if_statement" "labeled_statement" "block" "expression_switch_statement" "source_file" "_simple_statement" "default_case" "_statement" "type_switch_statement" "communication_case" "for_clause" "expression_case" "type_case"))
   ("short_var_declaration" ("if_statement" "labeled_statement" "block" "expression_switch_statement" "source_file" "_simple_statement" "default_case" "_statement" "type_switch_statement" "communication_case" "for_clause" "expression_case" "type_case"))
   ("slice_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("slice_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("struct_elem" ("interface_type"))
   ("struct_term" ("struct_elem"))
   ("struct_type" ("struct_term" "negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("true" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("type_alias" ("type_declaration"))
   ("type_arguments" ("call_expression" "generic_type"))
   ("type_assertion_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("type_case" ("type_switch_statement"))
   ("type_conversion_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("type_declaration" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("type_identifier" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "generic_type" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "qualified_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "composite_literal" "type_case"))
   ("type_parameter_list" ("function_declaration" "type_spec"))
   ("type_spec" ("type_declaration"))
   ("type_switch_statement" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("unary_expression" ("inc_statement" "expression_switch_statement" "unary_expression" "type_switch_statement" "argument_list" "call_expression" "for_clause" "_expression" "range_clause" "parenthesized_expression" "expression_list" "binary_expression" "variadic_argument" "type_conversion_expression" "if_statement" "for_statement" "index_expression" "go_statement" "type_assertion_expression" "slice_expression" "literal_element" "receive_statement" "send_statement" "dec_statement" "array_type" "defer_statement" "selector_expression" "expression_statement"))
   ("union_type" ("negated_type" "type_alias" "field_declaration" "slice_type" "argument_list" "channel_type" "type_spec" "generic_type" "parenthesized_type" "type_conversion_expression" "type_arguments" "parameter_declaration" "union_type" "type_assertion_expression" "map_type" "method_declaration" "function_type" "pointer_type" "const_spec" "method_spec" "func_literal" "implicit_length_array_type" "variadic_parameter_declaration" "var_spec" "_type" "_simple_type" "array_type" "function_declaration" "type_case"))
   ("var_declaration" ("labeled_statement" "block" "source_file" "default_case" "_statement" "communication_case" "expression_case" "type_case"))
   ("var_spec" ("var_declaration"))
   ("variadic_argument" ("argument_list"))
   ("variadic_parameter_declaration" ("parameter_list"))
  ) 
)
;; END Inverse production rules for go
;; START All node types in go
(defconst combobulate-rules-go-types 
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type" "argument_list" "array_type" "assignment_statement" "binary_expression" "blank_identifier" "block" "break_statement" "call_expression" "channel_type" "comment" "communication_case" "composite_literal" "const_declaration" "const_spec" "constraint_elem" "continue_statement" "dec_statement" "default_case" "defer_statement" "dot" "empty_statement" "escape_sequence" "expression_case" "expression_list" "expression_statement" "expression_switch_statement" "fallthrough_statement" "false" "field_declaration" "field_declaration_list" "field_identifier" "float_literal" "for_clause" "for_statement" "func_literal" "function_declaration" "function_type" "generic_type" "go_statement" "goto_statement" "identifier" "if_statement" "imaginary_literal" "implicit_length_array_type" "import_declaration" "import_spec" "import_spec_list" "inc_statement" "index_expression" "int_literal" "interface_type" "interpreted_string_literal" "iota" "keyed_element" "label_name" "labeled_statement" "literal_element" "literal_value" "map_type" "method_declaration" "method_spec" "negated_type" "nil" "package_clause" "package_identifier" "parameter_declaration" "parameter_list" "parenthesized_expression" "parenthesized_type" "pointer_type" "qualified_type" "range_clause" "raw_string_literal" "receive_statement" "return_statement" "rune_literal" "select_statement" "selector_expression" "send_statement" "short_var_declaration" "slice_expression" "slice_type" "source_file" "struct_elem" "struct_term" "struct_type" "true" "type_alias" "type_arguments" "type_assertion_expression" "type_case" "type_conversion_expression" "type_declaration" "type_identifier" "type_parameter_list" "type_spec" "type_switch_statement" "unary_expression" "union_type" "var_declaration" "var_spec" "variadic_argument" "variadic_parameter_declaration") 
)
;; END All node types in go
;; START All supertypes in go
(defconst combobulate-rules-go-supertypes 
 '("_expression" "_simple_statement" "_simple_type" "_statement" "_type") 
)
;; END All supertypes in go

;; START Production rules for python
(defconst combobulate-rules-python 
 '(("_compound_statement" (:*unnamed* ("if_statement" "for_statement" "try_statement" "with_statement" "function_definition" "match_statement" "class_definition" "decorated_definition" "while_statement"))) 
 ("_simple_statement" (:*unnamed* ("import_from_statement" "type_alias_statement" "import_statement" "delete_statement" "raise_statement" "continue_statement" "future_import_statement" "print_statement" "nonlocal_statement" "return_statement" "exec_statement" "assert_statement" "global_statement" "break_statement" "pass_statement" "expression_statement"))) 
 ("aliased_import" (:*unnamed* nil :alias ("identifier") :name ("dotted_name"))) 
 ("argument_list" (:*unnamed* ("expression" "list_splat" "parenthesized_expression" "keyword_argument" "dictionary_splat"))) 
 ("as_pattern" (:*unnamed* ("identifier" "case_pattern" "expression") :alias ("as_pattern_target"))) 
 ("assert_statement" (:*unnamed* ("expression"))) 
 ("assignment" (:*unnamed* nil :left ("pattern_list" "pattern") :right ("expression_list" "assignment" "pattern_list" "yield" "expression" "augmented_assignment") :type ("type"))) 
 ("attribute" (:*unnamed* nil :attribute ("identifier") :object ("primary_expression"))) 
 ("augmented_assignment" (:*unnamed* nil :left ("pattern_list" "pattern") :operator nil :right ("expression_list" "assignment" "pattern_list" "yield" "expression" "augmented_assignment"))) 
 ("await" (:*unnamed* ("primary_expression"))) 
 ("binary_operator" (:*unnamed* nil :left ("primary_expression") :operator nil :right ("primary_expression"))) 
 ("block" (:*unnamed* ("if_statement" "for_statement" "import_from_statement" "type_alias_statement" "with_statement" "import_statement" "delete_statement" "raise_statement" "class_definition" "continue_statement" "future_import_statement" "print_statement" "while_statement" "nonlocal_statement" "return_statement" "exec_statement" "try_statement" "assert_statement" "global_statement" "function_definition" "break_statement" "expression_statement" "pass_statement" "match_statement" "decorated_definition") :alternative ("case_clause"))) 
 ("boolean_operator" (:*unnamed* nil :left ("expression") :operator nil :right ("expression"))) 
 ("break_statement" (:*unnamed* nil)) 
 ("call" (:*unnamed* nil :arguments ("argument_list" "generator_expression") :function ("primary_expression"))) 
 ("case_clause" (:*unnamed* ("case_pattern") :consequence ("block") :guard ("if_clause"))) 
 ("case_pattern" (:*unnamed* ("false" "float" "splat_pattern" "class_pattern" "integer" "list_pattern" "union_pattern" "string" "as_pattern" "dotted_name" "true" "keyword_pattern" "complex_pattern" "dict_pattern" "concatenated_string" "tuple_pattern" "none"))) 
 ("chevron" (:*unnamed* ("expression"))) 
 ("class_definition" (:*unnamed* nil :body ("block") :name ("identifier") :superclasses ("argument_list") :type_parameters ("type_parameter"))) 
 ("class_pattern" (:*unnamed* ("case_pattern" "dotted_name"))) 
 ("comment" (:*unnamed* nil)) 
 ("comparison_operator" (:*unnamed* ("primary_expression") :operators nil)) 
 ("complex_pattern" (:*unnamed* ("integer" "float"))) 
 ("concatenated_string" (:*unnamed* ("string"))) 
 ("conditional_expression" (:*unnamed* ("expression"))) 
 ("constrained_type" (:*unnamed* ("type"))) 
 ("continue_statement" (:*unnamed* nil)) 
 ("decorated_definition" (:*unnamed* ("decorator") :definition ("class_definition" "function_definition"))) 
 ("decorator" (:*unnamed* ("expression"))) 
 ("default_parameter" (:*unnamed* nil :name ("identifier" "tuple_pattern") :value ("expression"))) 
 ("delete_statement" (:*unnamed* ("expression_list" "expression"))) 
 ("dict_pattern" (:*unnamed* ("splat_pattern") :key ("true" "false" "float" "splat_pattern" "complex_pattern" "class_pattern" "dict_pattern" "integer" "list_pattern" "union_pattern" "concatenated_string" "tuple_pattern" "string" "none" "dotted_name") :value ("case_pattern"))) 
 ("dictionary" (:*unnamed* ("pair" "dictionary_splat"))) 
 ("dictionary_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("pair"))) 
 ("dictionary_splat" (:*unnamed* ("expression"))) 
 ("dictionary_splat_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("dotted_name" (:*unnamed* ("identifier"))) 
 ("elif_clause" (:*unnamed* nil :condition ("expression") :consequence ("block"))) 
 ("ellipsis" (:*unnamed* nil)) 
 ("else_clause" (:*unnamed* nil :body ("block"))) 
 ("escape_interpolation" (:*unnamed* nil)) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("except_clause" (:*unnamed* ("block" "expression"))) 
 ("except_group_clause" (:*unnamed* ("block" "expression"))) 
 ("exec_statement" (:*unnamed* ("expression") :code ("identifier" "string"))) 
 ("expression" (:*unnamed* ("boolean_operator" "lambda" "comparison_operator" "not_operator" "primary_expression" "named_expression" "as_pattern" "conditional_expression"))) 
 ("expression_list" (:*unnamed* ("expression"))) 
 ("expression_statement" (:*unnamed* ("assignment" "yield" "augmented_assignment" "expression"))) 
 ("false" (:*unnamed* nil)) 
 ("finally_clause" (:*unnamed* ("block"))) 
 ("float" (:*unnamed* nil)) 
 ("for_in_clause" (:*unnamed* nil :left ("pattern_list" "pattern") :right ("expression"))) 
 ("for_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :left ("pattern_list" "pattern") :right ("expression_list" "expression"))) 
 ("format_expression" (:*unnamed* nil :expression ("expression_list" "pattern_list" "yield" "expression") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("format_specifier" (:*unnamed* ("format_expression"))) 
 ("function_definition" (:*unnamed* nil :body ("block") :name ("identifier") :parameters ("parameters") :return_type ("type") :type_parameters ("type_parameter"))) 
 ("future_import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name"))) 
 ("generator_expression" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression"))) 
 ("generic_type" (:*unnamed* ("identifier" "type_parameter"))) 
 ("global_statement" (:*unnamed* ("identifier"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_clause" (:*unnamed* ("expression"))) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause" "elif_clause") :condition ("expression") :consequence ("block"))) 
 ("import_from_statement" (:*unnamed* ("wildcard_import") :module_name ("relative_import" "dotted_name") :name ("aliased_import" "dotted_name"))) 
 ("import_prefix" (:*unnamed* nil)) 
 ("import_statement" (:*unnamed* nil :name ("aliased_import" "dotted_name"))) 
 ("integer" (:*unnamed* nil)) 
 ("interpolation" (:*unnamed* nil :expression ("expression_list" "pattern_list" "yield" "expression") :format_specifier ("format_specifier") :type_conversion ("type_conversion"))) 
 ("keyword_argument" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("keyword_pattern" (:*unnamed* ("false" "float" "splat_pattern" "class_pattern" "integer" "list_pattern" "union_pattern" "identifier" "string" "dotted_name" "true" "complex_pattern" "dict_pattern" "concatenated_string" "tuple_pattern" "none"))) 
 ("keyword_separator" (:*unnamed* nil)) 
 ("lambda" (:*unnamed* nil :body ("expression") :parameters ("lambda_parameters"))) 
 ("lambda_parameters" (:*unnamed* ("parameter"))) 
 ("line_continuation" (:*unnamed* nil)) 
 ("list" (:*unnamed* ("list_splat" "parenthesized_list_splat" "yield" "expression"))) 
 ("list_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression"))) 
 ("list_pattern" (:*unnamed* ("case_pattern" "pattern"))) 
 ("list_splat" (:*unnamed* ("identifier" "subscript" "attribute" "expression"))) 
 ("list_splat_pattern" (:*unnamed* ("identifier" "subscript" "attribute"))) 
 ("match_statement" (:*unnamed* nil :body ("block") :subject ("expression"))) 
 ("member_type" (:*unnamed* ("identifier" "type"))) 
 ("module" (:*unnamed* ("if_statement" "for_statement" "import_from_statement" "type_alias_statement" "with_statement" "import_statement" "delete_statement" "raise_statement" "class_definition" "continue_statement" "future_import_statement" "print_statement" "while_statement" "nonlocal_statement" "return_statement" "exec_statement" "try_statement" "assert_statement" "global_statement" "function_definition" "break_statement" "expression_statement" "pass_statement" "match_statement" "decorated_definition"))) 
 ("named_expression" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("none" (:*unnamed* nil)) 
 ("nonlocal_statement" (:*unnamed* ("identifier"))) 
 ("not_operator" (:*unnamed* nil :argument ("expression"))) 
 ("pair" (:*unnamed* nil :key ("expression") :value ("expression"))) 
 ("parameter" (:*unnamed* ("default_parameter" "positional_separator" "keyword_separator" "list_splat_pattern" "tuple_pattern" "typed_default_parameter" "typed_parameter" "identifier" "dictionary_splat_pattern"))) 
 ("parameters" (:*unnamed* ("parameter"))) 
 ("parenthesized_expression" (:*unnamed* ("parenthesized_expression" "list_splat" "yield" "expression"))) 
 ("parenthesized_list_splat" (:*unnamed* ("parenthesized_expression" "list_splat"))) 
 ("pass_statement" (:*unnamed* nil)) 
 ("pattern" (:*unnamed* ("list_splat_pattern" "tuple_pattern" "subscript" "identifier" "list_pattern" "attribute"))) 
 ("pattern_list" (:*unnamed* ("pattern"))) 
 ("positional_separator" (:*unnamed* nil)) 
 ("primary_expression" (:*unnamed* ("none" "ellipsis" "false" "float" "dictionary" "list_comprehension" "call" "binary_operator" "integer" "list" "tuple" "string" "true" "list_splat" "await" "parenthesized_expression" "attribute" "concatenated_string" "unary_operator" "set_comprehension" "subscript" "identifier" "dictionary_comprehension" "set" "generator_expression"))) 
 ("print_statement" (:*unnamed* ("chevron") :argument ("expression"))) 
 ("raise_statement" (:*unnamed* ("expression_list" "expression") :cause ("expression"))) 
 ("relative_import" (:*unnamed* ("import_prefix" "dotted_name"))) 
 ("return_statement" (:*unnamed* ("expression_list" "expression"))) 
 ("set" (:*unnamed* ("list_splat" "parenthesized_list_splat" "yield" "expression"))) 
 ("set_comprehension" (:*unnamed* ("if_clause" "for_in_clause") :body ("expression"))) 
 ("slice" (:*unnamed* ("expression"))) 
 ("splat_pattern" (:*unnamed* ("identifier"))) 
 ("splat_type" (:*unnamed* ("identifier"))) 
 ("string" (:*unnamed* ("string_end" "string_content" "string_start" "interpolation"))) 
 ("string_content" (:*unnamed* ("escape_interpolation" "escape_sequence"))) 
 ("string_end" (:*unnamed* nil)) 
 ("string_start" (:*unnamed* nil)) 
 ("subscript" (:*unnamed* nil :subscript ("expression" "slice") :value ("primary_expression"))) 
 ("true" (:*unnamed* nil)) 
 ("try_statement" (:*unnamed* ("else_clause" "finally_clause" "except_group_clause" "except_clause") :body ("block"))) 
 ("tuple" (:*unnamed* ("list_splat" "parenthesized_list_splat" "yield" "expression"))) 
 ("tuple_pattern" (:*unnamed* ("case_pattern" "pattern"))) 
 ("type" (:*unnamed* ("member_type" "constrained_type" "expression" "union_type" "generic_type" "splat_type"))) 
 ("type_alias_statement" (:*unnamed* ("type"))) 
 ("type_conversion" (:*unnamed* nil)) 
 ("type_parameter" (:*unnamed* ("type"))) 
 ("typed_default_parameter" (:*unnamed* nil :name ("identifier") :type ("type") :value ("expression"))) 
 ("typed_parameter" (:*unnamed* ("identifier" "dictionary_splat_pattern" "list_splat_pattern") :type ("type"))) 
 ("unary_operator" (:*unnamed* nil :argument ("primary_expression") :operator nil)) 
 ("union_pattern" (:*unnamed* ("true" "false" "float" "splat_pattern" "complex_pattern" "class_pattern" "dict_pattern" "integer" "list_pattern" "union_pattern" "concatenated_string" "tuple_pattern" "string" "none" "dotted_name"))) 
 ("union_type" (:*unnamed* ("type"))) 
 ("while_statement" (:*unnamed* nil :alternative ("else_clause") :body ("block") :condition ("expression"))) 
 ("wildcard_import" (:*unnamed* nil)) 
 ("with_clause" (:*unnamed* ("with_item"))) 
 ("with_item" (:*unnamed* nil :value ("expression"))) 
 ("with_statement" (:*unnamed* ("with_clause") :body ("block"))) 
 ("yield" (:*unnamed* ("expression_list" "expression"))) 
))
;; END Production rules for python
;; START Inverse production rules for python
(defconst combobulate-rules-python-inverse 
 '(("aliased_import" ("import_from_statement" "future_import_statement" "import_statement"))
   ("argument_list" ("call" "class_definition"))
   ("as_pattern" ("case_pattern" "expression"))
   ("as_pattern_target" ("as_pattern"))
   ("assert_statement" ("_simple_statement" "module" "block"))
   ("assignment" ("assignment" "expression_statement" "augmented_assignment"))
   ("attribute" ("dictionary_splat_pattern" "primary_expression" "list_splat_pattern" "pattern" "list_splat"))
   ("augmented_assignment" ("assignment" "expression_statement" "augmented_assignment"))
   ("await" ("primary_expression"))
   ("binary_operator" ("primary_expression"))
   ("block" ("finally_clause" "for_statement" "if_statement" "try_statement" "else_clause" "with_statement" "function_definition" "match_statement" "except_group_clause" "except_clause" "case_clause" "elif_clause" "class_definition" "while_statement"))
   ("boolean_operator" ("expression"))
   ("break_statement" ("_simple_statement" "module" "block"))
   ("call" ("primary_expression"))
   ("case_clause" ("block"))
   ("case_pattern" ("dict_pattern" "class_pattern" "list_pattern" "tuple_pattern" "case_clause" "as_pattern"))
   ("chevron" ("print_statement"))
   ("class_definition" ("_compound_statement" "module" "decorated_definition" "block"))
   ("class_pattern" ("dict_pattern" "case_pattern" "union_pattern" "keyword_pattern"))
   ("comparison_operator" ("expression"))
   ("complex_pattern" ("dict_pattern" "case_pattern" "union_pattern" "keyword_pattern"))
   ("concatenated_string" ("case_pattern" "primary_expression" "keyword_pattern" "dict_pattern" "union_pattern"))
   ("conditional_expression" ("expression"))
   ("constrained_type" ("type"))
   ("continue_statement" ("_simple_statement" "module" "block"))
   ("decorated_definition" ("_compound_statement" "module" "block"))
   ("decorator" ("decorated_definition"))
   ("default_parameter" ("parameter"))
   ("delete_statement" ("_simple_statement" "module" "block"))
   ("dict_pattern" ("dict_pattern" "case_pattern" "union_pattern" "keyword_pattern"))
   ("dictionary" ("primary_expression"))
   ("dictionary_comprehension" ("primary_expression"))
   ("dictionary_splat" ("dictionary" "argument_list"))
   ("dictionary_splat_pattern" ("typed_parameter" "parameter"))
   ("dotted_name" ("import_from_statement" "aliased_import" "case_pattern" "keyword_pattern" "dict_pattern" "class_pattern" "import_statement" "relative_import" "union_pattern" "future_import_statement"))
   ("elif_clause" ("if_statement"))
   ("ellipsis" ("primary_expression"))
   ("else_clause" ("if_statement" "for_statement" "try_statement" "while_statement"))
   ("escape_interpolation" ("string_content"))
   ("escape_sequence" ("string_content"))
   ("except_clause" ("try_statement"))
   ("except_group_clause" ("try_statement"))
   ("exec_statement" ("_simple_statement" "module" "block"))
   ("expression" ("list_comprehension" "argument_list" "tuple" "interpolation" "as_pattern" "conditional_expression" "boolean_operator" "return_statement" "parenthesized_expression" "named_expression" "slice" "expression_list" "assignment" "type" "set_comprehension" "pair" "typed_default_parameter" "match_statement" "dictionary_splat" "augmented_assignment" "if_statement" "for_statement" "yield" "lambda" "chevron" "decorator" "with_item" "list" "delete_statement" "raise_statement" "for_in_clause" "except_clause" "elif_clause" "print_statement" "while_statement" "exec_statement" "default_parameter" "list_splat" "not_operator" "assert_statement" "format_expression" "if_clause" "subscript" "except_group_clause" "expression_statement" "keyword_argument" "set" "generator_expression"))
   ("expression_list" ("for_statement" "return_statement" "yield" "format_expression" "assignment" "delete_statement" "raise_statement" "interpolation" "augmented_assignment"))
   ("expression_statement" ("_simple_statement" "module" "block"))
   ("false" ("case_pattern" "primary_expression" "keyword_pattern" "dict_pattern" "union_pattern"))
   ("finally_clause" ("try_statement"))
   ("float" ("case_pattern" "primary_expression" "keyword_pattern" "complex_pattern" "dict_pattern" "union_pattern"))
   ("for_in_clause" ("list_comprehension" "set_comprehension" "dictionary_comprehension" "generator_expression"))
   ("for_statement" ("_compound_statement" "module" "block"))
   ("format_expression" ("format_specifier"))
   ("format_specifier" ("format_expression" "interpolation"))
   ("function_definition" ("_compound_statement" "module" "decorated_definition" "block"))
   ("future_import_statement" ("_simple_statement" "module" "block"))
   ("generator_expression" ("call" "primary_expression"))
   ("generic_type" ("type"))
   ("global_statement" ("_simple_statement" "module" "block"))
   ("identifier" ("dictionary_splat_pattern" "as_pattern" "nonlocal_statement" "keyword_pattern" "generic_type" "named_expression" "attribute" "function_definition" "global_statement" "splat_type" "typed_default_parameter" "aliased_import" "splat_pattern" "list_splat_pattern" "class_definition" "dotted_name" "default_parameter" "primary_expression" "parameter" "pattern" "member_type" "typed_parameter" "exec_statement" "keyword_argument" "list_splat"))
   ("if_clause" ("list_comprehension" "set_comprehension" "case_clause" "dictionary_comprehension" "generator_expression"))
   ("if_statement" ("_compound_statement" "module" "block"))
   ("import_from_statement" ("_simple_statement" "module" "block"))
   ("import_prefix" ("relative_import"))
   ("import_statement" ("_simple_statement" "module" "block"))
   ("integer" ("case_pattern" "primary_expression" "keyword_pattern" "complex_pattern" "dict_pattern" "union_pattern"))
   ("interpolation" ("string"))
   ("keyword_argument" ("argument_list"))
   ("keyword_pattern" ("case_pattern"))
   ("keyword_separator" ("parameter"))
   ("lambda" ("expression"))
   ("lambda_parameters" ("lambda"))
   ("list" ("primary_expression"))
   ("list_comprehension" ("primary_expression"))
   ("list_pattern" ("case_pattern" "keyword_pattern" "dict_pattern" "union_pattern" "pattern"))
   ("list_splat" ("primary_expression" "parenthesized_expression" "list" "argument_list" "parenthesized_list_splat" "tuple" "set"))
   ("list_splat_pattern" ("typed_parameter" "pattern" "parameter"))
   ("match_statement" ("_compound_statement" "module" "block"))
   ("member_type" ("type"))
   ("named_expression" ("expression"))
   ("none" ("case_pattern" "primary_expression" "keyword_pattern" "dict_pattern" "union_pattern"))
   ("nonlocal_statement" ("_simple_statement" "module" "block"))
   ("not_operator" ("expression"))
   ("pair" ("dictionary" "dictionary_comprehension"))
   ("parameter" ("lambda_parameters" "parameters"))
   ("parameters" ("function_definition"))
   ("parenthesized_expression" ("parenthesized_expression" "argument_list" "parenthesized_list_splat" "primary_expression"))
   ("parenthesized_list_splat" ("tuple" "set" "list"))
   ("pass_statement" ("_simple_statement" "module" "block"))
   ("pattern" ("for_statement" "list_pattern" "assignment" "pattern_list" "tuple_pattern" "for_in_clause" "augmented_assignment"))
   ("pattern_list" ("for_statement" "format_expression" "assignment" "for_in_clause" "interpolation" "augmented_assignment"))
   ("positional_separator" ("parameter"))
   ("primary_expression" ("expression" "comparison_operator" "await" "call" "binary_operator" "attribute" "unary_operator" "subscript"))
   ("print_statement" ("_simple_statement" "module" "block"))
   ("raise_statement" ("_simple_statement" "module" "block"))
   ("relative_import" ("import_from_statement"))
   ("return_statement" ("_simple_statement" "module" "block"))
   ("set" ("primary_expression"))
   ("set_comprehension" ("primary_expression"))
   ("slice" ("subscript"))
   ("splat_pattern" ("dict_pattern" "case_pattern" "union_pattern" "keyword_pattern"))
   ("splat_type" ("type"))
   ("string" ("case_pattern" "primary_expression" "keyword_pattern" "dict_pattern" "union_pattern" "concatenated_string" "exec_statement"))
   ("string_content" ("string"))
   ("string_end" ("string"))
   ("string_start" ("string"))
   ("subscript" ("dictionary_splat_pattern" "primary_expression" "list_splat_pattern" "pattern" "list_splat"))
   ("true" ("case_pattern" "primary_expression" "keyword_pattern" "dict_pattern" "union_pattern"))
   ("try_statement" ("_compound_statement" "module" "block"))
   ("tuple" ("primary_expression"))
   ("tuple_pattern" ("case_pattern" "default_parameter" "parameter" "keyword_pattern" "dict_pattern" "union_pattern" "pattern"))
   ("type" ("type_alias_statement" "constrained_type" "union_type" "type_parameter" "function_definition" "member_type" "assignment" "typed_default_parameter" "typed_parameter"))
   ("type_alias_statement" ("_simple_statement" "module" "block"))
   ("type_conversion" ("format_expression" "interpolation"))
   ("type_parameter" ("generic_type" "class_definition" "function_definition"))
   ("typed_default_parameter" ("parameter"))
   ("typed_parameter" ("parameter"))
   ("unary_operator" ("primary_expression"))
   ("union_pattern" ("dict_pattern" "case_pattern" "union_pattern" "keyword_pattern"))
   ("union_type" ("type"))
   ("while_statement" ("_compound_statement" "module" "block"))
   ("wildcard_import" ("import_from_statement"))
   ("with_clause" ("with_statement"))
   ("with_item" ("with_clause"))
   ("with_statement" ("_compound_statement" "module" "block"))
   ("yield" ("parenthesized_expression" "format_expression" "list" "assignment" "tuple" "interpolation" "expression_statement" "set" "augmented_assignment"))
  ) 
)
;; END Inverse production rules for python
;; START All node types in python
(defconst combobulate-rules-python-types 
 '("_compound_statement" "_simple_statement" "aliased_import" "argument_list" "as_pattern" "as_pattern_target" "assert_statement" "assignment" "attribute" "augmented_assignment" "await" "binary_operator" "block" "boolean_operator" "break_statement" "call" "case_clause" "case_pattern" "chevron" "class_definition" "class_pattern" "comment" "comparison_operator" "complex_pattern" "concatenated_string" "conditional_expression" "constrained_type" "continue_statement" "decorated_definition" "decorator" "default_parameter" "delete_statement" "dict_pattern" "dictionary" "dictionary_comprehension" "dictionary_splat" "dictionary_splat_pattern" "dotted_name" "elif_clause" "ellipsis" "else_clause" "escape_interpolation" "escape_sequence" "except_clause" "except_group_clause" "exec_statement" "expression" "expression_list" "expression_statement" "false" "finally_clause" "float" "for_in_clause" "for_statement" "format_expression" "format_specifier" "function_definition" "future_import_statement" "generator_expression" "generic_type" "global_statement" "identifier" "if_clause" "if_statement" "import_from_statement" "import_prefix" "import_statement" "integer" "interpolation" "keyword_argument" "keyword_pattern" "keyword_separator" "lambda" "lambda_parameters" "line_continuation" "list" "list_comprehension" "list_pattern" "list_splat" "list_splat_pattern" "match_statement" "member_type" "module" "named_expression" "none" "nonlocal_statement" "not_operator" "pair" "parameter" "parameters" "parenthesized_expression" "parenthesized_list_splat" "pass_statement" "pattern" "pattern_list" "positional_separator" "primary_expression" "print_statement" "raise_statement" "relative_import" "return_statement" "set" "set_comprehension" "slice" "splat_pattern" "splat_type" "string" "string_content" "string_end" "string_start" "subscript" "true" "try_statement" "tuple" "tuple_pattern" "type" "type_alias_statement" "type_conversion" "type_parameter" "typed_default_parameter" "typed_parameter" "unary_operator" "union_pattern" "union_type" "while_statement" "wildcard_import" "with_clause" "with_item" "with_statement" "yield") 
)
;; END All node types in python
;; START All supertypes in python
(defconst combobulate-rules-python-supertypes 
 '("_compound_statement" "_simple_statement" "expression" "parameter" "pattern" "primary_expression") 
)
;; END All supertypes in python

;; START Production rules for c
(defconst combobulate-rules-c 
 '(("_abstract_declarator" (:*unnamed* ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_function_declarator"))) 
 ("_declarator" (:*unnamed* ("array_declarator" "pointer_declarator" "attributed_declarator" "identifier" "parenthesized_declarator" "function_declarator"))) 
 ("_field_declarator" (:*unnamed* ("array_declarator" "pointer_declarator" "attributed_declarator" "parenthesized_declarator" "field_identifier" "function_declarator"))) 
 ("_type_declarator" (:*unnamed* ("array_declarator" "pointer_declarator" "type_identifier" "attributed_declarator" "parenthesized_declarator" "primitive_type" "function_declarator"))) 
 ("abstract_array_declarator" (:*unnamed* ("type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_function_declarator") :size ("expression"))) 
 ("abstract_function_declarator" (:*unnamed* nil :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_function_declarator") :parameters ("parameter_list"))) 
 ("abstract_parenthesized_declarator" (:*unnamed* ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "ms_call_modifier"))) 
 ("abstract_pointer_declarator" (:*unnamed* ("ms_pointer_modifier" "type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_function_declarator"))) 
 ("alignas_qualifier" (:*unnamed* ("type_descriptor" "expression"))) 
 ("alignof_expression" (:*unnamed* nil :type ("type_descriptor"))) 
 ("argument_list" (:*unnamed* ("compound_statement" "preproc_defined" "expression"))) 
 ("array_declarator" (:*unnamed* ("type_qualifier") :declarator ("array_declarator" "type_identifier" "attributed_declarator" "primitive_type" "field_identifier" "pointer_declarator" "identifier" "parenthesized_declarator" "function_declarator") :size ("expression"))) 
 ("assignment_expression" (:*unnamed* nil :left ("identifier" "field_expression" "pointer_expression" "parenthesized_expression" "call_expression" "subscript_expression") :operator nil :right ("expression"))) 
 ("attribute" (:*unnamed* ("argument_list") :name ("identifier") :prefix ("identifier"))) 
 ("attribute_declaration" (:*unnamed* ("attribute"))) 
 ("attribute_specifier" (:*unnamed* ("argument_list"))) 
 ("attributed_declarator" (:*unnamed* ("array_declarator" "type_identifier" "attributed_declarator" "attribute_declaration" "primitive_type" "field_identifier" "pointer_declarator" "identifier" "parenthesized_declarator" "function_declarator"))) 
 ("attributed_statement" (:*unnamed* ("attribute_declaration" "statement"))) 
 ("binary_expression" (:*unnamed* nil :left ("preproc_defined" "expression") :operator nil :right ("preproc_defined" "expression"))) 
 ("bitfield_clause" (:*unnamed* ("expression"))) 
 ("break_statement" (:*unnamed* nil)) 
 ("call_expression" (:*unnamed* nil :arguments ("argument_list") :function ("expression"))) 
 ("case_statement" (:*unnamed* ("if_statement" "for_statement" "labeled_statement" "seh_leave_statement" "seh_try_statement" "type_definition" "compound_statement" "declaration" "attributed_statement" "continue_statement" "goto_statement" "while_statement" "return_statement" "break_statement" "do_statement" "switch_statement" "expression_statement") :value ("expression"))) 
 ("cast_expression" (:*unnamed* nil :type ("type_descriptor") :value ("expression"))) 
 ("char_literal" (:*unnamed* ("character" "escape_sequence"))) 
 ("character" (:*unnamed* nil)) 
 ("comma_expression" (:*unnamed* nil :left ("expression") :right ("comma_expression" "expression"))) 
 ("comment" (:*unnamed* nil)) 
 ("compound_literal_expression" (:*unnamed* nil :type ("type_descriptor") :value ("initializer_list"))) 
 ("compound_statement" (:*unnamed* ("preproc_include" "preproc_ifdef" "type_specifier" "function_definition" "preproc_function_def" "statement" "type_definition" "preproc_if" "linkage_specification" "declaration" "preproc_call" "preproc_def"))) 
 ("concatenated_string" (:*unnamed* ("identifier" "string_literal"))) 
 ("conditional_expression" (:*unnamed* nil :alternative ("expression") :condition ("expression") :consequence ("comma_expression" "expression"))) 
 ("continue_statement" (:*unnamed* nil)) 
 ("declaration" (:*unnamed* ("attribute_declaration" "attribute_specifier" "storage_class_specifier" "ms_declspec_modifier" "type_qualifier") :declarator ("array_declarator" "attributed_declarator" "ms_call_modifier" "init_declarator" "pointer_declarator" "identifier" "parenthesized_declarator" "gnu_asm_expression" "function_declarator") :type ("type_specifier"))) 
 ("declaration_list" (:*unnamed* ("preproc_include" "preproc_ifdef" "type_specifier" "function_definition" "preproc_function_def" "statement" "type_definition" "preproc_if" "linkage_specification" "declaration" "preproc_call" "preproc_def"))) 
 ("do_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
 ("else_clause" (:*unnamed* ("statement"))) 
 ("enum_specifier" (:*unnamed* ("attribute_specifier") :body ("enumerator_list") :name ("type_identifier") :underlying_type ("primitive_type"))) 
 ("enumerator" (:*unnamed* nil :name ("identifier") :value ("expression"))) 
 ("enumerator_list" (:*unnamed* ("preproc_call" "enumerator" "preproc_if" "preproc_ifdef"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("expression" (:*unnamed* ("char_literal" "false" "subscript_expression" "unary_expression" "call_expression" "gnu_asm_expression" "conditional_expression" "true" "null" "cast_expression" "generic_expression" "offsetof_expression" "parenthesized_expression" "update_expression" "number_literal" "compound_literal_expression" "sizeof_expression" "alignof_expression" "concatenated_string" "extension_expression" "binary_expression" "field_expression" "assignment_expression" "pointer_expression" "identifier" "string_literal"))) 
 ("expression_statement" (:*unnamed* ("comma_expression" "expression"))) 
 ("extension_expression" (:*unnamed* ("expression"))) 
 ("false" (:*unnamed* nil)) 
 ("field_declaration" (:*unnamed* ("attribute_declaration" "bitfield_clause" "attribute_specifier" "storage_class_specifier" "ms_declspec_modifier" "type_qualifier") :declarator ("array_declarator" "pointer_declarator" "attributed_declarator" "parenthesized_declarator" "field_identifier" "function_declarator") :type ("type_specifier"))) 
 ("field_declaration_list" (:*unnamed* ("preproc_if" "preproc_def" "preproc_call" "preproc_ifdef" "field_declaration" "preproc_function_def"))) 
 ("field_designator" (:*unnamed* ("field_identifier"))) 
 ("field_expression" (:*unnamed* nil :argument ("expression") :field ("field_identifier") :operator nil)) 
 ("field_identifier" (:*unnamed* nil)) 
 ("for_statement" (:*unnamed* nil :body ("statement") :condition ("comma_expression" "expression") :initializer ("comma_expression" "declaration" "expression") :update ("comma_expression" "expression"))) 
 ("function_declarator" (:*unnamed* ("attribute_specifier" "call_expression" "identifier" "gnu_asm_expression") :declarator ("array_declarator" "type_identifier" "attributed_declarator" "primitive_type" "field_identifier" "pointer_declarator" "identifier" "parenthesized_declarator" "function_declarator") :parameters ("parameter_list"))) 
 ("function_definition" (:*unnamed* ("attribute_declaration" "declaration" "attribute_specifier" "storage_class_specifier" "ms_declspec_modifier" "ms_call_modifier" "type_qualifier") :body ("compound_statement") :declarator ("array_declarator" "pointer_declarator" "attributed_declarator" "identifier" "parenthesized_declarator" "function_declarator") :type ("type_specifier"))) 
 ("generic_expression" (:*unnamed* ("type_descriptor" "expression"))) 
 ("gnu_asm_clobber_list" (:*unnamed* nil :register ("concatenated_string" "string_literal"))) 
 ("gnu_asm_expression" (:*unnamed* ("gnu_asm_qualifier") :assembly_code ("concatenated_string" "string_literal") :clobbers ("gnu_asm_clobber_list") :goto_labels ("gnu_asm_goto_list") :input_operands ("gnu_asm_input_operand_list") :output_operands ("gnu_asm_output_operand_list"))) 
 ("gnu_asm_goto_list" (:*unnamed* nil :label ("identifier"))) 
 ("gnu_asm_input_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("expression"))) 
 ("gnu_asm_input_operand_list" (:*unnamed* nil :operand ("gnu_asm_input_operand"))) 
 ("gnu_asm_output_operand" (:*unnamed* nil :constraint ("string_literal") :symbol ("identifier") :value ("expression"))) 
 ("gnu_asm_output_operand_list" (:*unnamed* nil :operand ("gnu_asm_output_operand"))) 
 ("gnu_asm_qualifier" (:*unnamed* nil)) 
 ("goto_statement" (:*unnamed* nil :label ("statement_identifier"))) 
 ("identifier" (:*unnamed* nil)) 
 ("if_statement" (:*unnamed* nil :alternative ("else_clause") :condition ("parenthesized_expression") :consequence ("statement"))) 
 ("init_declarator" (:*unnamed* nil :declarator ("array_declarator" "pointer_declarator" "attributed_declarator" "identifier" "parenthesized_declarator" "function_declarator") :value ("initializer_list" "expression"))) 
 ("initializer_list" (:*unnamed* ("initializer_list" "initializer_pair" "expression"))) 
 ("initializer_pair" (:*unnamed* nil :designator ("subscript_range_designator" "field_designator" "subscript_designator" "field_identifier") :value ("initializer_list" "expression"))) 
 ("labeled_statement" (:*unnamed* ("declaration" "statement") :label ("statement_identifier"))) 
 ("linkage_specification" (:*unnamed* nil :body ("declaration_list" "declaration" "function_definition") :value ("string_literal"))) 
 ("macro_type_specifier" (:*unnamed* nil :name ("identifier") :type ("type_descriptor"))) 
 ("ms_based_modifier" (:*unnamed* ("argument_list"))) 
 ("ms_call_modifier" (:*unnamed* nil)) 
 ("ms_declspec_modifier" (:*unnamed* ("identifier"))) 
 ("ms_pointer_modifier" (:*unnamed* ("ms_signed_ptr_modifier" "ms_restrict_modifier" "ms_unaligned_ptr_modifier" "ms_unsigned_ptr_modifier"))) 
 ("ms_restrict_modifier" (:*unnamed* nil)) 
 ("ms_signed_ptr_modifier" (:*unnamed* nil)) 
 ("ms_unaligned_ptr_modifier" (:*unnamed* nil)) 
 ("ms_unsigned_ptr_modifier" (:*unnamed* nil)) 
 ("null" (:*unnamed* nil)) 
 ("number_literal" (:*unnamed* nil)) 
 ("offsetof_expression" (:*unnamed* nil :member ("field_identifier") :type ("type_descriptor"))) 
 ("parameter_declaration" (:*unnamed* ("attribute_declaration" "attribute_specifier" "storage_class_specifier" "ms_declspec_modifier" "type_qualifier") :declarator ("array_declarator" "abstract_pointer_declarator" "attributed_declarator" "abstract_function_declarator" "pointer_declarator" "abstract_array_declarator" "identifier" "parenthesized_declarator" "abstract_parenthesized_declarator" "function_declarator") :type ("type_specifier"))) 
 ("parameter_list" (:*unnamed* ("identifier" "variadic_parameter" "compound_statement" "parameter_declaration"))) 
 ("parenthesized_declarator" (:*unnamed* ("array_declarator" "type_identifier" "attributed_declarator" "primitive_type" "field_identifier" "ms_call_modifier" "pointer_declarator" "identifier" "parenthesized_declarator" "function_declarator"))) 
 ("parenthesized_expression" (:*unnamed* ("compound_statement" "comma_expression" "expression" "preproc_defined"))) 
 ("pointer_declarator" (:*unnamed* ("ms_based_modifier" "ms_pointer_modifier" "type_qualifier") :declarator ("array_declarator" "type_identifier" "attributed_declarator" "primitive_type" "field_identifier" "pointer_declarator" "identifier" "parenthesized_declarator" "function_declarator"))) 
 ("pointer_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("preproc_arg" (:*unnamed* nil)) 
 ("preproc_call" (:*unnamed* nil :argument ("preproc_arg") :directive ("preproc_directive"))) 
 ("preproc_def" (:*unnamed* nil :name ("identifier") :value ("preproc_arg"))) 
 ("preproc_defined" (:*unnamed* ("identifier"))) 
 ("preproc_directive" (:*unnamed* nil)) 
 ("preproc_elif" (:*unnamed* ("preproc_include" "preproc_ifdef" "field_declaration" "function_definition" "preproc_function_def" "enumerator" "statement" "preproc_if" "type_definition" "linkage_specification" "declaration" "type_specifier" "preproc_call" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :condition ("char_literal" "preproc_defined" "parenthesized_expression" "number_literal" "unary_expression" "identifier" "binary_expression" "call_expression"))) 
 ("preproc_elifdef" (:*unnamed* ("preproc_include" "preproc_ifdef" "field_declaration" "function_definition" "preproc_function_def" "enumerator" "statement" "preproc_if" "type_definition" "linkage_specification" "declaration" "type_specifier" "preproc_call" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :name ("identifier"))) 
 ("preproc_else" (:*unnamed* ("preproc_include" "preproc_ifdef" "field_declaration" "function_definition" "preproc_function_def" "enumerator" "statement" "preproc_if" "type_definition" "linkage_specification" "declaration" "type_specifier" "preproc_call" "preproc_def"))) 
 ("preproc_function_def" (:*unnamed* nil :name ("identifier") :parameters ("preproc_params") :value ("preproc_arg"))) 
 ("preproc_if" (:*unnamed* ("preproc_include" "preproc_ifdef" "field_declaration" "function_definition" "preproc_function_def" "enumerator" "statement" "preproc_if" "type_definition" "linkage_specification" "declaration" "type_specifier" "preproc_call" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :condition ("char_literal" "preproc_defined" "parenthesized_expression" "number_literal" "unary_expression" "identifier" "binary_expression" "call_expression"))) 
 ("preproc_ifdef" (:*unnamed* ("preproc_include" "preproc_ifdef" "field_declaration" "function_definition" "preproc_function_def" "enumerator" "statement" "preproc_if" "type_definition" "linkage_specification" "declaration" "type_specifier" "preproc_call" "preproc_def") :alternative ("preproc_elifdef" "preproc_else" "preproc_elif") :name ("identifier"))) 
 ("preproc_include" (:*unnamed* nil :path ("call_expression" "identifier" "system_lib_string" "string_literal"))) 
 ("preproc_params" (:*unnamed* ("identifier"))) 
 ("primitive_type" (:*unnamed* nil)) 
 ("return_statement" (:*unnamed* ("comma_expression" "expression"))) 
 ("seh_except_clause" (:*unnamed* nil :body ("compound_statement") :filter ("parenthesized_expression"))) 
 ("seh_finally_clause" (:*unnamed* nil :body ("compound_statement"))) 
 ("seh_leave_statement" (:*unnamed* nil)) 
 ("seh_try_statement" (:*unnamed* ("seh_finally_clause" "seh_except_clause") :body ("compound_statement"))) 
 ("sized_type_specifier" (:*unnamed* ("type_qualifier") :type ("type_identifier" "primitive_type"))) 
 ("sizeof_expression" (:*unnamed* nil :type ("type_descriptor") :value ("expression"))) 
 ("statement" (:*unnamed* ("if_statement" "for_statement" "labeled_statement" "seh_leave_statement" "case_statement" "seh_try_statement" "compound_statement" "attributed_statement" "continue_statement" "goto_statement" "while_statement" "return_statement" "break_statement" "do_statement" "switch_statement" "expression_statement"))) 
 ("statement_identifier" (:*unnamed* nil)) 
 ("storage_class_specifier" (:*unnamed* nil)) 
 ("string_content" (:*unnamed* nil)) 
 ("string_literal" (:*unnamed* ("string_content" "escape_sequence"))) 
 ("struct_specifier" (:*unnamed* ("attribute_specifier" "ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("subscript_designator" (:*unnamed* ("expression"))) 
 ("subscript_expression" (:*unnamed* nil :argument ("expression") :index ("expression"))) 
 ("subscript_range_designator" (:*unnamed* nil :end ("expression") :start ("expression"))) 
 ("switch_statement" (:*unnamed* nil :body ("compound_statement") :condition ("parenthesized_expression"))) 
 ("system_lib_string" (:*unnamed* nil)) 
 ("translation_unit" (:*unnamed* ("if_statement" "for_statement" "labeled_statement" "case_statement" "type_specifier" "type_definition" "linkage_specification" "declaration" "attributed_statement" "continue_statement" "goto_statement" "while_statement" "return_statement" "preproc_include" "preproc_ifdef" "function_definition" "preproc_function_def" "break_statement" "preproc_if" "do_statement" "expression_statement" "preproc_call" "switch_statement" "compound_statement" "preproc_def"))) 
 ("true" (:*unnamed* nil)) 
 ("type_definition" (:*unnamed* ("attribute_specifier" "type_qualifier") :declarator ("array_declarator" "pointer_declarator" "type_identifier" "attributed_declarator" "parenthesized_declarator" "primitive_type" "function_declarator") :type ("type_specifier"))) 
 ("type_descriptor" (:*unnamed* ("type_qualifier") :declarator ("abstract_pointer_declarator" "abstract_array_declarator" "abstract_parenthesized_declarator" "abstract_function_declarator") :type ("type_specifier"))) 
 ("type_identifier" (:*unnamed* nil)) 
 ("type_qualifier" (:*unnamed* ("alignas_qualifier"))) 
 ("type_specifier" (:*unnamed* ("struct_specifier" "macro_type_specifier" "type_identifier" "enum_specifier" "sized_type_specifier" "primitive_type" "union_specifier"))) 
 ("unary_expression" (:*unnamed* nil :argument ("preproc_defined" "expression") :operator nil)) 
 ("union_specifier" (:*unnamed* ("attribute_specifier" "ms_declspec_modifier") :body ("field_declaration_list") :name ("type_identifier"))) 
 ("update_expression" (:*unnamed* nil :argument ("expression") :operator nil)) 
 ("variadic_parameter" (:*unnamed* nil)) 
 ("while_statement" (:*unnamed* nil :body ("statement") :condition ("parenthesized_expression"))) 
))
;; END Production rules for c
;; START Inverse production rules for c
(defconst combobulate-rules-c-inverse 
 '(("abstract_array_declarator" ("abstract_pointer_declarator" "abstract_function_declarator" "parameter_declaration" "_abstract_declarator" "type_descriptor" "abstract_array_declarator" "abstract_parenthesized_declarator"))
   ("abstract_function_declarator" ("abstract_pointer_declarator" "abstract_function_declarator" "parameter_declaration" "_abstract_declarator" "type_descriptor" "abstract_array_declarator" "abstract_parenthesized_declarator"))
   ("abstract_parenthesized_declarator" ("abstract_pointer_declarator" "abstract_function_declarator" "parameter_declaration" "_abstract_declarator" "type_descriptor" "abstract_array_declarator" "abstract_parenthesized_declarator"))
   ("abstract_pointer_declarator" ("abstract_pointer_declarator" "abstract_function_declarator" "parameter_declaration" "_abstract_declarator" "type_descriptor" "abstract_array_declarator" "abstract_parenthesized_declarator"))
   ("alignas_qualifier" ("type_qualifier"))
   ("alignof_expression" ("expression"))
   ("argument_list" ("attribute_specifier" "call_expression" "ms_based_modifier" "attribute"))
   ("array_declarator" ("array_declarator" "_declarator" "attributed_declarator" "parameter_declaration" "field_declaration" "function_declarator" "function_definition" "init_declarator" "pointer_declarator" "type_definition" "_type_declarator" "declaration" "parenthesized_declarator" "_field_declarator"))
   ("assignment_expression" ("expression"))
   ("attribute" ("attribute_declaration"))
   ("attribute_declaration" ("attributed_declarator" "parameter_declaration" "field_declaration" "function_definition" "declaration" "attributed_statement"))
   ("attribute_specifier" ("struct_specifier" "enum_specifier" "parameter_declaration" "field_declaration" "function_definition" "union_specifier" "type_definition" "declaration" "function_declarator"))
   ("attributed_declarator" ("array_declarator" "_declarator" "attributed_declarator" "parameter_declaration" "field_declaration" "function_declarator" "function_definition" "init_declarator" "pointer_declarator" "type_definition" "_type_declarator" "declaration" "parenthesized_declarator" "_field_declarator"))
   ("attributed_statement" ("case_statement" "translation_unit" "statement"))
   ("binary_expression" ("preproc_if" "expression" "preproc_elif"))
   ("bitfield_clause" ("field_declaration"))
   ("break_statement" ("case_statement" "translation_unit" "statement"))
   ("call_expression" ("preproc_include" "expression" "preproc_if" "assignment_expression" "function_declarator" "preproc_elif"))
   ("case_statement" ("translation_unit" "statement"))
   ("cast_expression" ("expression"))
   ("char_literal" ("preproc_if" "expression" "preproc_elif"))
   ("character" ("char_literal"))
   ("comma_expression" ("for_statement" "return_statement" "comma_expression" "parenthesized_expression" "expression_statement" "conditional_expression"))
   ("compound_literal_expression" ("expression"))
   ("compound_statement" ("parameter_list" "seh_finally_clause" "case_statement" "parenthesized_expression" "seh_except_clause" "function_definition" "statement" "seh_try_statement" "argument_list" "translation_unit" "switch_statement"))
   ("concatenated_string" ("gnu_asm_clobber_list" "gnu_asm_expression" "expression"))
   ("conditional_expression" ("expression"))
   ("continue_statement" ("case_statement" "translation_unit" "statement"))
   ("declaration" ("for_statement" "labeled_statement" "case_statement" "preproc_ifdef" "function_definition" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "linkage_specification" "declaration_list" "compound_statement" "preproc_elif"))
   ("declaration_list" ("linkage_specification"))
   ("do_statement" ("case_statement" "translation_unit" "statement"))
   ("else_clause" ("if_statement"))
   ("enum_specifier" ("type_specifier"))
   ("enumerator" ("enumerator_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "preproc_elif"))
   ("enumerator_list" ("enum_specifier"))
   ("escape_sequence" ("char_literal" "string_literal"))
   ("expression" ("unary_expression" "enumerator" "argument_list" "call_expression" "gnu_asm_input_operand" "conditional_expression" "return_statement" "comma_expression" "parenthesized_expression" "sizeof_expression" "extension_expression" "binary_expression" "assignment_expression" "bitfield_clause" "gnu_asm_output_operand" "subscript_designator" "for_statement" "case_statement" "subscript_expression" "init_declarator" "subscript_range_designator" "array_declarator" "cast_expression" "alignas_qualifier" "generic_expression" "initializer_list" "initializer_pair" "update_expression" "abstract_array_declarator" "field_expression" "pointer_expression" "expression_statement"))
   ("expression_statement" ("case_statement" "translation_unit" "statement"))
   ("extension_expression" ("expression"))
   ("false" ("expression"))
   ("field_declaration" ("field_declaration_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "preproc_elif"))
   ("field_declaration_list" ("struct_specifier" "union_specifier"))
   ("field_designator" ("initializer_pair"))
   ("field_expression" ("assignment_expression" "expression"))
   ("field_identifier" ("array_declarator" "field_designator" "attributed_declarator" "offsetof_expression" "initializer_pair" "field_declaration" "function_declarator" "pointer_declarator" "field_expression" "parenthesized_declarator" "_field_declarator"))
   ("for_statement" ("case_statement" "translation_unit" "statement"))
   ("function_declarator" ("array_declarator" "_declarator" "attributed_declarator" "parameter_declaration" "field_declaration" "function_declarator" "function_definition" "init_declarator" "pointer_declarator" "type_definition" "_type_declarator" "declaration" "parenthesized_declarator" "_field_declarator"))
   ("function_definition" ("preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "linkage_specification" "declaration_list" "compound_statement" "preproc_elif"))
   ("generic_expression" ("expression"))
   ("gnu_asm_clobber_list" ("gnu_asm_expression"))
   ("gnu_asm_expression" ("declaration" "expression" "function_declarator"))
   ("gnu_asm_goto_list" ("gnu_asm_expression"))
   ("gnu_asm_input_operand" ("gnu_asm_input_operand_list"))
   ("gnu_asm_input_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_output_operand" ("gnu_asm_output_operand_list"))
   ("gnu_asm_output_operand_list" ("gnu_asm_expression"))
   ("gnu_asm_qualifier" ("gnu_asm_expression"))
   ("goto_statement" ("case_statement" "translation_unit" "statement"))
   ("identifier" ("expression" "enumerator" "pointer_declarator" "declaration" "gnu_asm_input_operand" "function_declarator" "gnu_asm_goto_list" "preproc_include" "preproc_params" "attribute" "function_definition" "concatenated_string" "assignment_expression" "gnu_asm_output_operand" "preproc_elif" "parameter_list" "_declarator" "attributed_declarator" "parameter_declaration" "preproc_defined" "init_declarator" "parenthesized_declarator" "array_declarator" "macro_type_specifier" "preproc_ifdef" "preproc_function_def" "preproc_elifdef" "preproc_if" "ms_declspec_modifier" "preproc_def"))
   ("if_statement" ("case_statement" "translation_unit" "statement"))
   ("init_declarator" ("declaration"))
   ("initializer_list" ("init_declarator" "initializer_list" "initializer_pair" "compound_literal_expression"))
   ("initializer_pair" ("initializer_list"))
   ("labeled_statement" ("case_statement" "translation_unit" "statement"))
   ("linkage_specification" ("preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("macro_type_specifier" ("type_specifier"))
   ("ms_based_modifier" ("pointer_declarator"))
   ("ms_call_modifier" ("parenthesized_declarator" "abstract_parenthesized_declarator" "declaration" "function_definition"))
   ("ms_declspec_modifier" ("struct_specifier" "parameter_declaration" "field_declaration" "function_definition" "union_specifier" "declaration"))
   ("ms_pointer_modifier" ("abstract_pointer_declarator" "pointer_declarator"))
   ("ms_restrict_modifier" ("ms_pointer_modifier"))
   ("ms_signed_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unaligned_ptr_modifier" ("ms_pointer_modifier"))
   ("ms_unsigned_ptr_modifier" ("ms_pointer_modifier"))
   ("null" ("expression"))
   ("number_literal" ("preproc_if" "expression" "preproc_elif"))
   ("offsetof_expression" ("expression"))
   ("parameter_declaration" ("parameter_list"))
   ("parameter_list" ("abstract_function_declarator" "function_declarator"))
   ("parenthesized_declarator" ("array_declarator" "_declarator" "attributed_declarator" "parameter_declaration" "field_declaration" "function_declarator" "function_definition" "init_declarator" "pointer_declarator" "type_definition" "_type_declarator" "declaration" "parenthesized_declarator" "_field_declarator"))
   ("parenthesized_expression" ("if_statement" "expression" "seh_except_clause" "preproc_if" "do_statement" "assignment_expression" "switch_statement" "while_statement" "preproc_elif"))
   ("pointer_declarator" ("array_declarator" "_declarator" "attributed_declarator" "parameter_declaration" "field_declaration" "function_declarator" "function_definition" "init_declarator" "pointer_declarator" "type_definition" "_type_declarator" "declaration" "parenthesized_declarator" "_field_declarator"))
   ("pointer_expression" ("assignment_expression" "expression"))
   ("preproc_arg" ("preproc_call" "preproc_function_def" "preproc_def"))
   ("preproc_call" ("field_declaration_list" "enumerator_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("preproc_def" ("field_declaration_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("preproc_defined" ("parenthesized_expression" "unary_expression" "argument_list" "binary_expression" "preproc_if" "preproc_elif"))
   ("preproc_directive" ("preproc_call"))
   ("preproc_elif" ("preproc_elifdef" "preproc_if" "preproc_ifdef" "preproc_elif"))
   ("preproc_elifdef" ("preproc_elifdef" "preproc_if" "preproc_ifdef" "preproc_elif"))
   ("preproc_else" ("preproc_elifdef" "preproc_if" "preproc_ifdef" "preproc_elif"))
   ("preproc_function_def" ("field_declaration_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("preproc_if" ("field_declaration_list" "enumerator_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("preproc_ifdef" ("field_declaration_list" "enumerator_list" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("preproc_include" ("preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("preproc_params" ("preproc_function_def"))
   ("primitive_type" ("array_declarator" "enum_specifier" "attributed_declarator" "sized_type_specifier" "type_specifier" "pointer_declarator" "type_definition" "_type_declarator" "parenthesized_declarator" "function_declarator"))
   ("return_statement" ("case_statement" "translation_unit" "statement"))
   ("seh_except_clause" ("seh_try_statement"))
   ("seh_finally_clause" ("seh_try_statement"))
   ("seh_leave_statement" ("case_statement" "statement"))
   ("seh_try_statement" ("case_statement" "statement"))
   ("sized_type_specifier" ("type_specifier"))
   ("sizeof_expression" ("expression"))
   ("statement" ("if_statement" "for_statement" "labeled_statement" "else_clause" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "do_statement" "declaration_list" "compound_statement" "attributed_statement" "while_statement" "preproc_elif"))
   ("statement_identifier" ("labeled_statement" "goto_statement"))
   ("storage_class_specifier" ("field_declaration" "parameter_declaration" "declaration" "function_definition"))
   ("string_content" ("string_literal"))
   ("string_literal" ("preproc_include" "expression" "concatenated_string" "linkage_specification" "gnu_asm_clobber_list" "gnu_asm_output_operand" "gnu_asm_input_operand" "gnu_asm_expression"))
   ("struct_specifier" ("type_specifier"))
   ("subscript_designator" ("initializer_pair"))
   ("subscript_expression" ("assignment_expression" "expression"))
   ("subscript_range_designator" ("initializer_pair"))
   ("switch_statement" ("case_statement" "translation_unit" "statement"))
   ("system_lib_string" ("preproc_include"))
   ("true" ("expression"))
   ("type_definition" ("case_statement" "preproc_ifdef" "preproc_else" "preproc_elifdef" "preproc_if" "translation_unit" "declaration_list" "compound_statement" "preproc_elif"))
   ("type_descriptor" ("cast_expression" "alignas_qualifier" "generic_expression" "macro_type_specifier" "offsetof_expression" "compound_literal_expression" "sizeof_expression" "alignof_expression"))
   ("type_identifier" ("array_declarator" "struct_specifier" "enum_specifier" "attributed_declarator" "sized_type_specifier" "type_specifier" "union_specifier" "pointer_declarator" "type_definition" "_type_declarator" "parenthesized_declarator" "function_declarator"))
   ("type_qualifier" ("array_declarator" "abstract_pointer_declarator" "parameter_declaration" "sized_type_specifier" "field_declaration" "function_definition" "type_descriptor" "pointer_declarator" "type_definition" "abstract_array_declarator" "declaration"))
   ("type_specifier" ("parameter_declaration" "preproc_ifdef" "field_declaration" "function_definition" "preproc_else" "type_definition" "preproc_elifdef" "preproc_if" "translation_unit" "type_descriptor" "declaration" "declaration_list" "compound_statement" "preproc_elif"))
   ("unary_expression" ("preproc_if" "expression" "preproc_elif"))
   ("union_specifier" ("type_specifier"))
   ("update_expression" ("expression"))
   ("variadic_parameter" ("parameter_list"))
   ("while_statement" ("case_statement" "translation_unit" "statement"))
  ) 
)
;; END Inverse production rules for c
;; START All node types in c
(defconst combobulate-rules-c-types 
 '("_abstract_declarator" "_declarator" "_field_declarator" "_type_declarator" "abstract_array_declarator" "abstract_function_declarator" "abstract_parenthesized_declarator" "abstract_pointer_declarator" "alignas_qualifier" "alignof_expression" "argument_list" "array_declarator" "assignment_expression" "attribute" "attribute_declaration" "attribute_specifier" "attributed_declarator" "attributed_statement" "binary_expression" "bitfield_clause" "break_statement" "call_expression" "case_statement" "cast_expression" "char_literal" "character" "comma_expression" "comment" "compound_literal_expression" "compound_statement" "concatenated_string" "conditional_expression" "continue_statement" "declaration" "declaration_list" "do_statement" "else_clause" "enum_specifier" "enumerator" "enumerator_list" "escape_sequence" "expression" "expression_statement" "extension_expression" "false" "field_declaration" "field_declaration_list" "field_designator" "field_expression" "field_identifier" "for_statement" "function_declarator" "function_definition" "generic_expression" "gnu_asm_clobber_list" "gnu_asm_expression" "gnu_asm_goto_list" "gnu_asm_input_operand" "gnu_asm_input_operand_list" "gnu_asm_output_operand" "gnu_asm_output_operand_list" "gnu_asm_qualifier" "goto_statement" "identifier" "if_statement" "init_declarator" "initializer_list" "initializer_pair" "labeled_statement" "linkage_specification" "macro_type_specifier" "ms_based_modifier" "ms_call_modifier" "ms_declspec_modifier" "ms_pointer_modifier" "ms_restrict_modifier" "ms_signed_ptr_modifier" "ms_unaligned_ptr_modifier" "ms_unsigned_ptr_modifier" "null" "number_literal" "offsetof_expression" "parameter_declaration" "parameter_list" "parenthesized_declarator" "parenthesized_expression" "pointer_declarator" "pointer_expression" "preproc_arg" "preproc_call" "preproc_def" "preproc_defined" "preproc_directive" "preproc_elif" "preproc_elifdef" "preproc_else" "preproc_function_def" "preproc_if" "preproc_ifdef" "preproc_include" "preproc_params" "primitive_type" "return_statement" "seh_except_clause" "seh_finally_clause" "seh_leave_statement" "seh_try_statement" "sized_type_specifier" "sizeof_expression" "statement" "statement_identifier" "storage_class_specifier" "string_content" "string_literal" "struct_specifier" "subscript_designator" "subscript_expression" "subscript_range_designator" "switch_statement" "system_lib_string" "translation_unit" "true" "type_definition" "type_descriptor" "type_identifier" "type_qualifier" "type_specifier" "unary_expression" "union_specifier" "update_expression" "variadic_parameter" "while_statement") 
)
;; END All node types in c
;; START All supertypes in c
(defconst combobulate-rules-c-supertypes 
 '("_abstract_declarator" "_declarator" "_field_declarator" "_type_declarator" "expression" "statement" "type_specifier") 
)
;; END All supertypes in c

;; START Production rules for html
(defconst combobulate-rules-html 
 '(("attribute" (:*unnamed* ("attribute_name" "quoted_attribute_value" "attribute_value"))) 
 ("attribute_name" (:*unnamed* nil)) 
 ("attribute_value" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("doctype" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("entity" "doctype" "erroneous_end_tag" "script_element" "element" "style_element" "text"))) 
 ("element" (:*unnamed* ("element" "start_tag" "entity" "doctype" "erroneous_end_tag" "script_element" "style_element" "self_closing_tag" "end_tag" "text"))) 
 ("end_tag" (:*unnamed* ("tag_name"))) 
 ("entity" (:*unnamed* nil)) 
 ("erroneous_end_tag" (:*unnamed* ("erroneous_end_tag_name"))) 
 ("erroneous_end_tag_name" (:*unnamed* nil)) 
 ("quoted_attribute_value" (:*unnamed* ("attribute_value"))) 
 ("raw_text" (:*unnamed* nil)) 
 ("script_element" (:*unnamed* ("start_tag" "raw_text" "end_tag"))) 
 ("self_closing_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("start_tag" (:*unnamed* ("tag_name" "attribute"))) 
 ("style_element" (:*unnamed* ("start_tag" "raw_text" "end_tag"))) 
 ("tag_name" (:*unnamed* nil)) 
 ("text" (:*unnamed* nil)) 
))
;; END Production rules for html
;; START Inverse production rules for html
(defconst combobulate-rules-html-inverse 
 '(("attribute" ("start_tag" "self_closing_tag"))
   ("attribute_name" ("attribute"))
   ("attribute_value" ("quoted_attribute_value" "attribute"))
   ("doctype" ("document" "element"))
   ("element" ("document" "element"))
   ("end_tag" ("style_element" "script_element" "element"))
   ("entity" ("document" "element"))
   ("erroneous_end_tag" ("document" "element"))
   ("erroneous_end_tag_name" ("erroneous_end_tag"))
   ("quoted_attribute_value" ("attribute"))
   ("raw_text" ("style_element" "script_element"))
   ("script_element" ("document" "element"))
   ("self_closing_tag" ("element"))
   ("start_tag" ("style_element" "script_element" "element"))
   ("style_element" ("document" "element"))
   ("tag_name" ("start_tag" "self_closing_tag" "end_tag"))
   ("text" ("document" "element"))
  ) 
)
;; END Inverse production rules for html
;; START All node types in html
(defconst combobulate-rules-html-types 
 '("attribute" "attribute_name" "attribute_value" "comment" "doctype" "document" "element" "end_tag" "entity" "erroneous_end_tag" "erroneous_end_tag_name" "quoted_attribute_value" "raw_text" "script_element" "self_closing_tag" "start_tag" "style_element" "tag_name" "text") 
)
;; END All node types in html
;; START All supertypes in html
(defconst combobulate-rules-html-supertypes 
 nil 
)
;; END All supertypes in html

;; START Production rules for toml
(defconst combobulate-rules-toml 
 '(("array" (:*unnamed* ("string" "boolean" "float" "local_date" "inline_table" "integer" "array" "local_date_time" "local_time" "offset_date_time"))) 
 ("bare_key" (:*unnamed* nil)) 
 ("boolean" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("table_array_element" "table" "pair"))) 
 ("dotted_key" (:*unnamed* ("quoted_key" "bare_key" "dotted_key"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("float" (:*unnamed* nil)) 
 ("inline_table" (:*unnamed* ("pair"))) 
 ("integer" (:*unnamed* nil)) 
 ("local_date" (:*unnamed* nil)) 
 ("local_date_time" (:*unnamed* nil)) 
 ("local_time" (:*unnamed* nil)) 
 ("offset_date_time" (:*unnamed* nil)) 
 ("pair" (:*unnamed* ("string" "boolean" "bare_key" "float" "local_date" "quoted_key" "inline_table" "integer" "array" "local_date_time" "local_time" "offset_date_time" "dotted_key"))) 
 ("quoted_key" (:*unnamed* ("escape_sequence"))) 
 ("string" (:*unnamed* ("escape_sequence"))) 
 ("table" (:*unnamed* ("quoted_key" "bare_key" "pair" "dotted_key"))) 
 ("table_array_element" (:*unnamed* ("quoted_key" "bare_key" "pair" "dotted_key"))) 
))
;; END Production rules for toml
;; START Inverse production rules for toml
(defconst combobulate-rules-toml-inverse 
 '(("array" ("array" "pair"))
   ("bare_key" ("table_array_element" "table" "pair" "dotted_key"))
   ("boolean" ("array" "pair"))
   ("dotted_key" ("table_array_element" "table" "pair" "dotted_key"))
   ("escape_sequence" ("string" "quoted_key"))
   ("float" ("array" "pair"))
   ("inline_table" ("array" "pair"))
   ("integer" ("array" "pair"))
   ("local_date" ("array" "pair"))
   ("local_date_time" ("array" "pair"))
   ("local_time" ("array" "pair"))
   ("offset_date_time" ("array" "pair"))
   ("pair" ("inline_table" "table_array_element" "table" "document"))
   ("quoted_key" ("table_array_element" "table" "pair" "dotted_key"))
   ("string" ("array" "pair"))
   ("table" ("document"))
   ("table_array_element" ("document"))
  ) 
)
;; END Inverse production rules for toml
;; START All node types in toml
(defconst combobulate-rules-toml-types 
 '("array" "bare_key" "boolean" "comment" "document" "dotted_key" "escape_sequence" "float" "inline_table" "integer" "local_date" "local_date_time" "local_time" "offset_date_time" "pair" "quoted_key" "string" "table" "table_array_element") 
)
;; END All node types in toml
;; START All supertypes in toml
(defconst combobulate-rules-toml-supertypes 
 nil 
)
;; END All supertypes in toml

;; START Production rules for json
(defconst combobulate-rules-json 
 '(("_value" (:*unnamed* ("null" "true" "number" "false" "array" "string" "object"))) 
 ("array" (:*unnamed* ("null" "true" "number" "false" "array" "string" "object"))) 
 ("comment" (:*unnamed* nil)) 
 ("document" (:*unnamed* ("null" "true" "number" "false" "array" "string" "object"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("false" (:*unnamed* nil)) 
 ("null" (:*unnamed* nil)) 
 ("number" (:*unnamed* nil)) 
 ("object" (:*unnamed* ("pair"))) 
 ("pair" (:*unnamed* nil :key ("string") :value ("null" "true" "number" "false" "array" "string" "object"))) 
 ("string" (:*unnamed* ("string_content"))) 
 ("string_content" (:*unnamed* ("escape_sequence"))) 
 ("true" (:*unnamed* nil)) 
))
;; END Production rules for json
;; START Inverse production rules for json
(defconst combobulate-rules-json-inverse 
 '(("array" ("_value" "array" "pair" "document"))
   ("escape_sequence" ("string_content"))
   ("false" ("_value" "array" "pair" "document"))
   ("null" ("_value" "array" "pair" "document"))
   ("number" ("_value" "array" "pair" "document"))
   ("object" ("_value" "array" "pair" "document"))
   ("pair" ("object"))
   ("string" ("_value" "array" "pair" "document"))
   ("string_content" ("string"))
   ("true" ("_value" "array" "pair" "document"))
  ) 
)
;; END Inverse production rules for json
;; START All node types in json
(defconst combobulate-rules-json-types 
 '("_value" "array" "comment" "document" "escape_sequence" "false" "null" "number" "object" "pair" "string" "string_content" "true") 
)
;; END All node types in json
;; START All supertypes in json
(defconst combobulate-rules-json-supertypes 
 '("_value") 
)
;; END All supertypes in json

;; START Production rules for ruby
(defconst combobulate-rules-ruby 
 '(("_arg" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("_call_operator" (:*unnamed* nil)) 
 ("_expression" (:*unnamed* ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("_lhs" (:*unnamed* ("scope_resolution" "call" "false" "true" "element_reference" "nil"))) 
 ("_method_name" (:*unnamed* ("delimited_symbol" "operator" "setter" "identifier" "constant" "simple_symbol"))) 
 (_nonlocal_variable (:*unnamed* ("instance_variable" "class_variable" "global_variable"))) 
 ("_pattern_constant" (:*unnamed* ("scope_resolution" "constant"))) 
 ("_pattern_expr" (:*unnamed* ("alternative_pattern" "as_pattern"))) 
 (_pattern_expr_basic (:*unnamed* ("expression_reference_pattern" "find_pattern" "scope_resolution" "hash_pattern" "identifier" "variable_reference_pattern" "array_pattern" "parenthesized_pattern" "range" "constant"))) 
 (_pattern_primitive (:*unnamed* ("delimited_symbol" "lambda" "false" "self" "regex" "simple_symbol" "line" "nil" "string_array" "encoding" "file" "symbol_array" "heredoc_beginning" "subshell" "unary" "string" "true"))) 
 ("_pattern_top_expr_body" (:*unnamed* ("alternative_pattern" "find_pattern" "hash_pattern" "as_pattern" "array_pattern"))) 
 (_primary (:*unnamed* ("delimited_symbol" "false" "simple_symbol" "return" "case" "parenthesized_statements" "array" "singleton_method" "scope_resolution" "string_array" "element_reference" "heredoc_beginning" "unless" "yield" "unary" "string" "regex" "until" "class" "true" "while" "call" "redo" "lambda" "chained_string" "hash" "module" "singleton_class" "nil" "case_match" "for" "character" "next" "symbol_array" "begin" "subshell" "retry" "if" "break" "method"))) 
 (_simple_numeric (:*unnamed* ("float" "rational" "integer" "complex"))) 
 ("_statement" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern"))) 
 (_variable (:*unnamed* ("super" "class_variable" "self" "instance_variable" "global_variable" "identifier" "constant"))) 
 ("alias" (:*unnamed* nil :alias ("delimited_symbol" "operator" "setter" "identifier" "constant" "simple_symbol") :name ("delimited_symbol" "operator" "setter" "identifier" "constant" "simple_symbol"))) 
 ("alternative_pattern" (:*unnamed* nil :alternatives ("expression_reference_pattern" "find_pattern" "scope_resolution" "hash_pattern" "identifier" "variable_reference_pattern" "array_pattern" "parenthesized_pattern" "range" "constant"))) 
 ("argument_list" (:*unnamed* ("call" "return" "splat_argument" "binary" "range" "assignment" "pair" "conditional" "next" "block_argument" "hash_splat_argument" "test_pattern" "yield" "operator_assignment" "unary" "forward_argument" "break" "match_pattern"))) 
 ("array" (:*unnamed* ("call" "return" "splat_argument" "binary" "range" "assignment" "pair" "conditional" "next" "block_argument" "hash_splat_argument" "test_pattern" "yield" "operator_assignment" "unary" "forward_argument" "break" "match_pattern"))) 
 ("array_pattern" (:*unnamed* ("alternative_pattern" "splat_parameter" "as_pattern") :class ("scope_resolution" "constant"))) 
 ("as_pattern" (:*unnamed* nil :name ("identifier") :value ("alternative_pattern" "as_pattern"))) 
 ("assignment" (:*unnamed* nil :left ("scope_resolution" "call" "false" "true" "element_reference" "nil" "left_assignment_list") :right ("call" "rescue_modifier" "return" "splat_argument" "binary" "range" "assignment" "conditional" "next" "test_pattern" "yield" "operator_assignment" "unary" "right_assignment_list" "break" "match_pattern"))) 
 ("bare_string" (:*unnamed* ("string_content" "interpolation" "escape_sequence"))) 
 ("bare_symbol" (:*unnamed* ("string_content" "interpolation" "escape_sequence"))) 
 ("begin" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "rescue" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "empty_statement" "end_block" "yield" "operator_assignment" "unary" "begin_block" "ensure" "break" "else" "match_pattern"))) 
 ("begin_block" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("binary" (:*unnamed* nil :left ("call" "integer" "complex" "return" "binary" "range" "assignment" "conditional" "rational" "next" "float" "test_pattern" "yield" "operator_assignment" "unary" "break" "match_pattern") :operator nil :right ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("block" (:*unnamed* nil :body ("block_body") :parameters ("block_parameters"))) 
 ("block_argument" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("block_body" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("block_parameter" (:*unnamed* nil :name ("identifier"))) 
 ("block_parameters" (:*unnamed* ("hash_splat_nil" "optional_parameter" "destructured_parameter" "identifier" "splat_parameter" "hash_splat_parameter" "forward_parameter" "keyword_parameter" "block_parameter") :locals ("identifier"))) 
 ("body_statement" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "rescue" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "empty_statement" "end_block" "yield" "operator_assignment" "unary" "begin_block" "ensure" "break" "else" "match_pattern"))) 
 ("break" (:*unnamed* ("argument_list"))) 
 ("call" (:*unnamed* nil :arguments ("argument_list") :block ("block" "do_block") :method ("operator" "self" "instance_variable" "identifier" "class_variable" "global_variable" "super" "constant") :operator nil :receiver ("delimited_symbol" "false" "simple_symbol" "return" "case" "parenthesized_statements" "array" "singleton_method" "scope_resolution" "string_array" "element_reference" "heredoc_beginning" "unless" "yield" "unary" "string" "regex" "until" "class" "true" "while" "call" "redo" "lambda" "chained_string" "hash" "module" "singleton_class" "nil" "case_match" "for" "character" "next" "symbol_array" "begin" "subshell" "retry" "if" "break" "method"))) 
 ("case" (:*unnamed* ("when" "else") :value ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern"))) 
 ("case_match" (:*unnamed* nil :clauses ("in_clause") :else ("else") :value ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern"))) 
 ("chained_string" (:*unnamed* ("string"))) 
 ("character" (:*unnamed* nil)) 
 ("class" (:*unnamed* nil :body ("body_statement") :name ("scope_resolution" "constant") :superclass ("superclass"))) 
 ("class_variable" (:*unnamed* nil)) 
 ("comment" (:*unnamed* nil)) 
 ("complex" (:*unnamed* ("rational" "integer" "float"))) 
 ("conditional" (:*unnamed* nil :alternative ("conditional" "operator_assignment" "unary" "binary" "range" "assignment") :condition ("conditional" "operator_assignment" "unary" "binary" "range" "assignment") :consequence ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("constant" (:*unnamed* nil)) 
 ("delimited_symbol" (:*unnamed* ("string_content" "interpolation" "escape_sequence"))) 
 ("destructured_left_assignment" (:*unnamed* ("scope_resolution" "call" "rest_assignment" "false" "destructured_left_assignment" "element_reference" "true" "nil"))) 
 ("destructured_parameter" (:*unnamed* ("hash_splat_nil" "optional_parameter" "destructured_parameter" "identifier" "splat_parameter" "hash_splat_parameter" "forward_parameter" "keyword_parameter" "block_parameter"))) 
 ("do" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("do_block" (:*unnamed* nil :body ("body_statement") :parameters ("block_parameters"))) 
 ("element_reference" (:*unnamed* ("call" "return" "splat_argument" "binary" "range" "assignment" "pair" "conditional" "next" "block_argument" "hash_splat_argument" "test_pattern" "yield" "operator_assignment" "unary" "forward_argument" "break" "match_pattern") :block ("block" "do_block") :object ("delimited_symbol" "false" "simple_symbol" "return" "case" "parenthesized_statements" "array" "singleton_method" "scope_resolution" "string_array" "element_reference" "heredoc_beginning" "unless" "yield" "unary" "string" "regex" "until" "class" "true" "while" "call" "redo" "lambda" "chained_string" "hash" "module" "singleton_class" "nil" "case_match" "for" "character" "next" "symbol_array" "begin" "subshell" "retry" "if" "break" "method"))) 
 ("else" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("elsif" (:*unnamed* nil :alternative ("else" "elsif") :condition ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :consequence ("then"))) 
 ("empty_statement" (:*unnamed* nil)) 
 ("encoding" (:*unnamed* nil)) 
 ("end_block" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("ensure" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("escape_sequence" (:*unnamed* nil)) 
 ("exception_variable" (:*unnamed* ("scope_resolution" "call" "false" "true" "element_reference" "nil"))) 
 ("exceptions" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "splat_argument" "range" "assignment"))) 
 ("expression_reference_pattern" (:*unnamed* nil :value ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("false" (:*unnamed* nil)) 
 ("file" (:*unnamed* nil)) 
 ("find_pattern" (:*unnamed* ("alternative_pattern" "splat_parameter" "as_pattern") :class ("scope_resolution" "constant"))) 
 ("float" (:*unnamed* nil)) 
 ("for" (:*unnamed* nil :body ("do") :pattern ("scope_resolution" "call" "false" "true" "element_reference" "nil" "left_assignment_list") :value ("in"))) 
 ("forward_argument" (:*unnamed* nil)) 
 ("forward_parameter" (:*unnamed* nil)) 
 ("global_variable" (:*unnamed* nil)) 
 ("hash" (:*unnamed* ("pair" "hash_splat_argument"))) 
 ("hash_key_symbol" (:*unnamed* nil)) 
 ("hash_pattern" (:*unnamed* ("hash_splat_nil" "hash_splat_parameter" "keyword_pattern") :class ("scope_resolution" "constant"))) 
 ("hash_splat_argument" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("hash_splat_nil" (:*unnamed* nil)) 
 ("hash_splat_parameter" (:*unnamed* nil :name ("identifier"))) 
 ("heredoc_beginning" (:*unnamed* nil)) 
 ("heredoc_body" (:*unnamed* ("heredoc_end" "heredoc_content" "interpolation" "escape_sequence"))) 
 ("heredoc_content" (:*unnamed* nil)) 
 ("heredoc_end" (:*unnamed* nil)) 
 ("identifier" (:*unnamed* nil)) 
 ("if" (:*unnamed* nil :alternative ("else" "elsif") :condition ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :consequence ("then"))) 
 ("if_guard" (:*unnamed* nil :condition ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("if_modifier" (:*unnamed* nil :body ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :condition ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("in" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("in_clause" (:*unnamed* nil :body ("then") :guard ("if_guard" "unless_guard") :pattern ("alternative_pattern" "find_pattern" "hash_pattern" "as_pattern" "array_pattern"))) 
 ("instance_variable" (:*unnamed* nil)) 
 ("integer" (:*unnamed* nil)) 
 ("interpolation" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "class_variable" "global_variable" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "instance_variable" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("keyword_parameter" (:*unnamed* nil :name ("identifier") :value ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("keyword_pattern" (:*unnamed* nil :key ("string" "hash_key_symbol") :value ("alternative_pattern" "as_pattern"))) 
 ("lambda" (:*unnamed* nil :body ("block" "do_block") :parameters ("lambda_parameters"))) 
 ("lambda_parameters" (:*unnamed* ("hash_splat_nil" "optional_parameter" "destructured_parameter" "identifier" "splat_parameter" "hash_splat_parameter" "forward_parameter" "keyword_parameter" "block_parameter"))) 
 ("left_assignment_list" (:*unnamed* ("scope_resolution" "call" "rest_assignment" "false" "destructured_left_assignment" "element_reference" "true" "nil"))) 
 ("line" (:*unnamed* nil)) 
 ("match_pattern" (:*unnamed* nil :pattern ("alternative_pattern" "find_pattern" "hash_pattern" "as_pattern" "array_pattern") :value ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("method" (:*unnamed* nil :body ("conditional" "body_statement" "rescue_modifier" "operator_assignment" "unary" "binary" "range" "assignment") :name ("delimited_symbol" "operator" "setter" "identifier" "constant" "simple_symbol") :parameters ("method_parameters"))) 
 ("method_parameters" (:*unnamed* ("hash_splat_nil" "optional_parameter" "destructured_parameter" "identifier" "splat_parameter" "hash_splat_parameter" "forward_parameter" "keyword_parameter" "block_parameter"))) 
 ("module" (:*unnamed* nil :body ("body_statement") :name ("scope_resolution" "constant"))) 
 ("next" (:*unnamed* ("argument_list"))) 
 ("nil" (:*unnamed* nil)) 
 ("operator" (:*unnamed* nil)) 
 ("operator_assignment" (:*unnamed* nil :left ("scope_resolution" "call" "false" "true" "element_reference" "nil") :operator nil :right ("conditional" "call" "next" "test_pattern" "rescue_modifier" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("optional_parameter" (:*unnamed* nil :name ("identifier") :value ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("pair" (:*unnamed* nil :key ("conditional" "hash_key_symbol" "string" "operator_assignment" "unary" "binary" "range" "assignment") :value ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("parenthesized_pattern" (:*unnamed* ("alternative_pattern" "as_pattern"))) 
 ("parenthesized_statements" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("pattern" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "splat_argument" "range" "assignment"))) 
 ("program" (:*unnamed* ("call" "uninterpreted" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("range" (:*unnamed* nil :begin ("delimited_symbol" "lambda" "false" "self" "string" "simple_symbol" "binary" "range" "assignment" "line" "nil" "conditional" "string_array" "encoding" "file" "symbol_array" "heredoc_beginning" "subshell" "operator_assignment" "unary" "regex" "true") :end ("delimited_symbol" "lambda" "false" "self" "string" "simple_symbol" "binary" "range" "assignment" "line" "nil" "conditional" "string_array" "encoding" "file" "symbol_array" "heredoc_beginning" "subshell" "operator_assignment" "unary" "regex" "true") :operator nil)) 
 ("rational" (:*unnamed* ("integer" "float"))) 
 ("redo" (:*unnamed* ("argument_list"))) 
 ("regex" (:*unnamed* ("string_content" "interpolation" "escape_sequence"))) 
 ("rescue" (:*unnamed* nil :body ("then") :exceptions ("exceptions") :variable ("exception_variable"))) 
 ("rescue_modifier" (:*unnamed* nil :body ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :handler ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("rest_assignment" (:*unnamed* ("scope_resolution" "call" "false" "true" "element_reference" "nil"))) 
 ("retry" (:*unnamed* ("argument_list"))) 
 ("return" (:*unnamed* ("argument_list"))) 
 ("right_assignment_list" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "splat_argument" "range" "assignment"))) 
 ("scope_resolution" (:*unnamed* nil :name ("constant") :scope ("delimited_symbol" "false" "simple_symbol" "return" "case" "parenthesized_statements" "array" "singleton_method" "scope_resolution" "string_array" "element_reference" "heredoc_beginning" "unless" "yield" "unary" "string" "regex" "until" "class" "true" "constant" "while" "call" "redo" "lambda" "chained_string" "hash" "module" "singleton_class" "nil" "case_match" "for" "character" "next" "symbol_array" "begin" "subshell" "retry" "if" "break" "method"))) 
 ("self" (:*unnamed* nil)) 
 ("setter" (:*unnamed* nil :name ("identifier"))) 
 ("simple_symbol" (:*unnamed* nil)) 
 ("singleton_class" (:*unnamed* nil :body ("body_statement") :value ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("singleton_method" (:*unnamed* nil :body ("conditional" "body_statement" "rescue_modifier" "operator_assignment" "unary" "binary" "range" "assignment") :name ("delimited_symbol" "operator" "setter" "identifier" "constant" "simple_symbol") :object ("conditional" "self" "instance_variable" "identifier" "global_variable" "operator_assignment" "unary" "binary" "class_variable" "range" "assignment" "super" "constant") :parameters ("method_parameters"))) 
 ("splat_argument" (:*unnamed* ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("splat_parameter" (:*unnamed* nil :name ("identifier"))) 
 ("string" (:*unnamed* ("string_content" "interpolation" "escape_sequence"))) 
 ("string_array" (:*unnamed* ("bare_string"))) 
 ("string_content" (:*unnamed* nil)) 
 ("subshell" (:*unnamed* ("string_content" "interpolation" "escape_sequence"))) 
 ("super" (:*unnamed* nil)) 
 ("superclass" (:*unnamed* ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("symbol_array" (:*unnamed* ("bare_symbol"))) 
 ("test_pattern" (:*unnamed* nil :pattern ("alternative_pattern" "find_pattern" "hash_pattern" "as_pattern" "array_pattern") :value ("conditional" "operator_assignment" "unary" "binary" "range" "assignment"))) 
 ("then" (:*unnamed* ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "empty_statement" "match_pattern"))) 
 ("true" (:*unnamed* nil)) 
 ("unary" (:*unnamed* nil :operand ("call" "integer" "complex" "return" "parenthesized_statements" "binary" "range" "assignment" "conditional" "rational" "next" "float" "test_pattern" "yield" "operator_assignment" "unary" "break" "match_pattern") :operator nil)) 
 ("undef" (:*unnamed* ("delimited_symbol" "operator" "setter" "identifier" "constant" "simple_symbol"))) 
 ("uninterpreted" (:*unnamed* nil)) 
 ("unless" (:*unnamed* nil :alternative ("else" "elsif") :condition ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :consequence ("then"))) 
 ("unless_guard" (:*unnamed* nil :condition ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("unless_modifier" (:*unnamed* nil :body ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :condition ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("until" (:*unnamed* nil :body ("do") :condition ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern"))) 
 ("until_modifier" (:*unnamed* nil :body ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :condition ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("variable_reference_pattern" (:*unnamed* nil :name ("instance_variable" "identifier" "class_variable" "global_variable"))) 
 ("when" (:*unnamed* nil :body ("then") :pattern ("pattern"))) 
 ("while" (:*unnamed* nil :body ("do") :condition ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern"))) 
 ("while_modifier" (:*unnamed* nil :body ("call" "if_modifier" "until_modifier" "rescue_modifier" "while_modifier" "return" "undef" "binary" "range" "assignment" "unless_modifier" "conditional" "alias" "next" "test_pattern" "end_block" "yield" "operator_assignment" "unary" "begin_block" "break" "match_pattern") :condition ("conditional" "call" "next" "test_pattern" "yield" "return" "operator_assignment" "unary" "binary" "range" "assignment" "break" "match_pattern"))) 
 ("yield" (:*unnamed* ("argument_list"))) 
))
;; END Production rules for ruby
;; START Inverse production rules for ruby
(defconst combobulate-rules-ruby-inverse 
 '(("alias" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("alternative_pattern" ("find_pattern" "match_pattern" "keyword_pattern" "as_pattern" "_pattern_top_expr_body" "array_pattern" "test_pattern" "parenthesized_pattern" "_pattern_expr" "in_clause"))
   ("argument_list" ("call" "redo" "next" "retry" "yield" "return" "break"))
   ("array" ("element_reference" "call" "scope_resolution" _primary))
   ("array_pattern" (_pattern_expr_basic "_pattern_top_expr_body" "in_clause" "test_pattern" "alternative_pattern" "match_pattern"))
   ("as_pattern" ("find_pattern" "match_pattern" "keyword_pattern" "as_pattern" "_pattern_top_expr_body" "array_pattern" "test_pattern" "parenthesized_pattern" "_pattern_expr" "in_clause"))
   ("assignment" ("superclass" "in" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "range" "array" "method" "unless_modifier" "singleton_method" "match_pattern" "hash_splat_argument" "exceptions" "element_reference" "test_pattern" "pattern" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "optional_parameter" "_arg" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "splat_argument" "assignment" "singleton_class" "pair" "case_match" "_statement" "conditional" "expression_reference_pattern" "block_argument" "argument_list" "begin" "end_block" "unless_guard" "keyword_parameter" "if" "right_assignment_list" "ensure" "then" "interpolation" "block_body"))
   ("bare_string" ("string_array"))
   ("bare_symbol" ("symbol_array"))
   ("begin" ("element_reference" "call" "scope_resolution" _primary))
   ("begin_block" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("binary" ("superclass" "in" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "range" "array" "method" "unless_modifier" "singleton_method" "match_pattern" "hash_splat_argument" "exceptions" "element_reference" "test_pattern" "pattern" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "optional_parameter" "_arg" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "splat_argument" "assignment" "singleton_class" "pair" "case_match" "_statement" "conditional" "expression_reference_pattern" "block_argument" "argument_list" "begin" "end_block" "unless_guard" "keyword_parameter" "if" "right_assignment_list" "ensure" "then" "interpolation" "block_body"))
   ("block" ("lambda" "call" "element_reference"))
   ("block_argument" ("array" "element_reference" "argument_list"))
   ("block_body" ("block"))
   ("block_parameter" ("destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("block_parameters" ("block" "do_block"))
   ("body_statement" ("singleton_method" "class" "module" "do_block" "singleton_class" "method"))
   ("break" ("superclass" "if_guard" "program" "until_modifier" "then" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "scope_resolution" "element_reference" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "call" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "if" "ensure" _primary "interpolation" "block_body"))
   ("call" ("superclass" "destructured_left_assignment" "if_guard" "program" "until_modifier" "then" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "scope_resolution" "rest_assignment" "element_reference" "left_assignment_list" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "call" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "exception_variable" "do" "assignment" "case_match" "for" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "_lhs" "if" "ensure" _primary "interpolation" "block_body"))
   ("case" ("element_reference" "call" "scope_resolution" _primary))
   ("case_match" ("element_reference" "call" "scope_resolution" _primary))
   ("chained_string" ("element_reference" "call" "scope_resolution" _primary))
   ("character" ("element_reference" "call" "scope_resolution" _primary))
   ("class" ("element_reference" "call" "scope_resolution" _primary))
   ("class_variable" ("interpolation" "call" _nonlocal_variable "variable_reference_pattern" _variable "singleton_method"))
   ("complex" (_simple_numeric "unary" "binary"))
   ("conditional" ("superclass" "in" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "range" "array" "method" "unless_modifier" "singleton_method" "match_pattern" "hash_splat_argument" "exceptions" "element_reference" "test_pattern" "pattern" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "optional_parameter" "_arg" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "splat_argument" "assignment" "singleton_class" "pair" "case_match" "_statement" "conditional" "expression_reference_pattern" "block_argument" "argument_list" "begin" "end_block" "unless_guard" "keyword_parameter" "if" "right_assignment_list" "ensure" "then" "interpolation" "block_body"))
   ("constant" ("alias" "find_pattern" "call" "scope_resolution" _pattern_expr_basic "_method_name" "hash_pattern" "array_pattern" _variable "singleton_method" "alternative_pattern" "module" "undef" "_pattern_constant" "class" "method"))
   ("delimited_symbol" ("alias" "scope_resolution" "call" "_method_name" "element_reference" "singleton_method" _pattern_primitive "undef" "range" _primary "method"))
   ("destructured_left_assignment" ("destructured_left_assignment" "left_assignment_list"))
   ("destructured_parameter" ("destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("do" ("while" "until" "for"))
   ("do_block" ("lambda" "call" "element_reference"))
   ("element_reference" ("scope_resolution" "call" "rest_assignment" "destructured_left_assignment" "element_reference" "left_assignment_list" "exception_variable" "operator_assignment" "_lhs" "assignment" _primary "for"))
   ("else" ("body_statement" "begin" "unless" "case" "elsif" "case_match" "if"))
   ("elsif" ("if" "unless" "elsif"))
   ("empty_statement" ("interpolation" "body_statement" "program" "begin" "end_block" "do" "parenthesized_statements" "begin_block" "ensure" "then" "else" "block_body"))
   ("encoding" (_pattern_primitive "range"))
   ("end_block" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("ensure" ("body_statement" "begin"))
   ("escape_sequence" ("delimited_symbol" "string" "heredoc_body" "regex" "subshell" "bare_symbol" "bare_string"))
   ("exception_variable" ("rescue"))
   ("exceptions" ("rescue"))
   ("expression_reference_pattern" ("alternative_pattern" _pattern_expr_basic))
   ("false" ("scope_resolution" "call" "rest_assignment" "destructured_left_assignment" "element_reference" "left_assignment_list" _pattern_primitive "exception_variable" "operator_assignment" "_lhs" "range" "assignment" _primary "for"))
   ("file" (_pattern_primitive "range"))
   ("find_pattern" (_pattern_expr_basic "_pattern_top_expr_body" "in_clause" "test_pattern" "alternative_pattern" "match_pattern"))
   ("float" ("rational" "complex" "unary" "binary" _simple_numeric))
   ("for" ("element_reference" "call" "scope_resolution" _primary))
   ("forward_argument" ("array" "element_reference" "argument_list"))
   ("forward_parameter" ("destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("global_variable" ("interpolation" "call" _nonlocal_variable "variable_reference_pattern" _variable "singleton_method"))
   ("hash" ("element_reference" "call" "scope_resolution" _primary))
   ("hash_key_symbol" ("pair" "keyword_pattern"))
   ("hash_pattern" (_pattern_expr_basic "_pattern_top_expr_body" "in_clause" "test_pattern" "alternative_pattern" "match_pattern"))
   ("hash_splat_argument" ("hash" "array" "element_reference" "argument_list"))
   ("hash_splat_nil" ("hash_pattern" "destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("hash_splat_parameter" ("hash_pattern" "destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("heredoc_beginning" ("scope_resolution" "call" "element_reference" _pattern_primitive "range" _primary))
   ("heredoc_content" ("heredoc_body"))
   ("heredoc_end" ("heredoc_body"))
   ("identifier" ("destructured_parameter" "undef" "hash_splat_parameter" "singleton_method" "variable_reference_pattern" _variable "call" "_method_name" "as_pattern" "optional_parameter" "method_parameters" "block_parameter" "lambda_parameters" "alias" _pattern_expr_basic "block_parameters" "splat_parameter" "alternative_pattern" "keyword_parameter" "setter" "method"))
   ("if" ("element_reference" "call" "scope_resolution" _primary))
   ("if_guard" ("in_clause"))
   ("if_modifier" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("in" ("for"))
   ("in_clause" ("case_match"))
   ("instance_variable" ("interpolation" "call" _nonlocal_variable "variable_reference_pattern" _variable "singleton_method"))
   ("integer" ("rational" "complex" "unary" "binary" _simple_numeric))
   ("interpolation" ("delimited_symbol" "string" "heredoc_body" "regex" "subshell" "bare_symbol" "bare_string"))
   ("keyword_parameter" ("destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("keyword_pattern" ("hash_pattern"))
   ("lambda" ("scope_resolution" "call" "element_reference" _pattern_primitive "range" _primary))
   ("lambda_parameters" ("lambda"))
   ("left_assignment_list" ("assignment" "for"))
   ("line" (_pattern_primitive "range"))
   ("match_pattern" ("superclass" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "element_reference" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "if" "ensure" "then" "interpolation" "block_body"))
   ("method" ("element_reference" "call" "scope_resolution" _primary))
   ("method_parameters" ("method" "singleton_method"))
   ("module" ("element_reference" "call" "scope_resolution" _primary))
   ("next" ("superclass" "if_guard" "program" "until_modifier" "then" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "scope_resolution" "element_reference" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "call" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "if" "ensure" _primary "interpolation" "block_body"))
   ("nil" ("scope_resolution" "call" "rest_assignment" "destructured_left_assignment" "element_reference" "left_assignment_list" _pattern_primitive "exception_variable" "operator_assignment" "_lhs" "range" "assignment" _primary "for"))
   ("operator" ("alias" "call" "_method_name" "singleton_method" "undef" "method"))
   ("operator_assignment" ("superclass" "in" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "range" "array" "method" "unless_modifier" "singleton_method" "match_pattern" "hash_splat_argument" "exceptions" "element_reference" "test_pattern" "pattern" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "optional_parameter" "_arg" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "splat_argument" "assignment" "singleton_class" "pair" "case_match" "_statement" "conditional" "expression_reference_pattern" "block_argument" "argument_list" "begin" "end_block" "unless_guard" "keyword_parameter" "if" "right_assignment_list" "ensure" "then" "interpolation" "block_body"))
   ("optional_parameter" ("destructured_parameter" "block_parameters" "method_parameters" "lambda_parameters"))
   ("pair" ("hash" "array" "element_reference" "argument_list"))
   ("parenthesized_pattern" ("alternative_pattern" _pattern_expr_basic))
   ("parenthesized_statements" ("scope_resolution" "call" "element_reference" "unary" _primary))
   ("pattern" ("when"))
   ("range" ("superclass" "in" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "range" "array" "method" "unless_modifier" "singleton_method" "match_pattern" "hash_splat_argument" "exceptions" "element_reference" "test_pattern" "pattern" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "optional_parameter" "_arg" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "splat_argument" "assignment" "singleton_class" "pair" "case_match" "_statement" "conditional" "expression_reference_pattern" _pattern_expr_basic "block_argument" "argument_list" "begin" "end_block" "alternative_pattern" "unless_guard" "keyword_parameter" "if" "right_assignment_list" "ensure" "then" "interpolation" "block_body"))
   ("rational" (_simple_numeric "complex" "unary" "binary"))
   ("redo" ("element_reference" "call" "scope_resolution" _primary))
   ("regex" ("scope_resolution" "call" "element_reference" _pattern_primitive "range" _primary))
   ("rescue" ("body_statement" "begin"))
   ("rescue_modifier" ("program" "until_modifier" "case" "parenthesized_statements" "method" "unless_modifier" "singleton_method" "unless" "operator_assignment" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("rest_assignment" ("destructured_left_assignment" "left_assignment_list"))
   ("retry" ("element_reference" "call" "scope_resolution" _primary))
   ("return" ("superclass" "if_guard" "program" "until_modifier" "then" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "scope_resolution" "element_reference" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "call" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "if" "ensure" _primary "interpolation" "block_body"))
   ("right_assignment_list" ("assignment"))
   ("scope_resolution" ("destructured_left_assignment" "_pattern_constant" "find_pattern" "scope_resolution" "rest_assignment" "hash_pattern" "element_reference" "array_pattern" "operator_assignment" "class" "call" "exception_variable" "module" "assignment" "for" _pattern_expr_basic "alternative_pattern" "_lhs" _primary "left_assignment_list"))
   ("self" ("call" _variable _pattern_primitive "range" "singleton_method"))
   ("setter" ("alias" "_method_name" "singleton_method" "undef" "method"))
   ("simple_symbol" ("alias" "scope_resolution" "call" "_method_name" "element_reference" "singleton_method" _pattern_primitive "undef" "range" _primary "method"))
   ("singleton_class" ("element_reference" "call" "scope_resolution" _primary))
   ("singleton_method" ("element_reference" "call" "scope_resolution" _primary))
   ("splat_argument" ("exceptions" "element_reference" "argument_list" "pattern" "right_assignment_list" "array" "assignment"))
   ("splat_parameter" ("find_pattern" "destructured_parameter" "block_parameters" "array_pattern" "method_parameters" "lambda_parameters"))
   ("string" ("scope_resolution" "call" "keyword_pattern" "chained_string" "element_reference" _pattern_primitive "range" "pair" _primary))
   ("string_array" ("scope_resolution" "call" "element_reference" _pattern_primitive "range" _primary))
   ("string_content" ("delimited_symbol" "string" "regex" "subshell" "bare_symbol" "bare_string"))
   ("subshell" ("scope_resolution" "call" "element_reference" _pattern_primitive "range" _primary))
   ("super" ("call" _variable "singleton_method"))
   ("superclass" ("class"))
   ("symbol_array" ("scope_resolution" "call" "element_reference" _pattern_primitive "range" _primary))
   ("test_pattern" ("superclass" "if_guard" "program" "until_modifier" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "element_reference" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "if" "ensure" "then" "interpolation" "block_body"))
   ("then" ("when" "unless" "elsif" "rescue" "if" "in_clause"))
   ("true" ("scope_resolution" "call" "rest_assignment" "destructured_left_assignment" "element_reference" "left_assignment_list" _pattern_primitive "exception_variable" "operator_assignment" "_lhs" "range" "assignment" _primary "for"))
   ("unary" ("superclass" "in" "if_guard" "program" "until_modifier" "then" "case" "parenthesized_statements" "binary" "range" "array" "method" "unless_modifier" "singleton_method" "scope_resolution" "match_pattern" "hash_splat_argument" "exceptions" "element_reference" "test_pattern" "pattern" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "call" "_expression" "optional_parameter" "_arg" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" _pattern_primitive "do" "splat_argument" "assignment" "singleton_class" "pair" "case_match" "_statement" "conditional" "expression_reference_pattern" "block_argument" "argument_list" "begin" "end_block" "unless_guard" "keyword_parameter" "if" "right_assignment_list" "ensure" _primary "interpolation" "block_body"))
   ("undef" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("uninterpreted" ("program"))
   ("unless" ("element_reference" "call" "scope_resolution" _primary))
   ("unless_guard" ("in_clause"))
   ("unless_modifier" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("until" ("element_reference" "call" "scope_resolution" _primary))
   ("until_modifier" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("variable_reference_pattern" ("alternative_pattern" _pattern_expr_basic))
   ("when" ("case"))
   ("while" ("element_reference" "call" "scope_resolution" _primary))
   ("while_modifier" ("program" "until_modifier" "case" "parenthesized_statements" "unless_modifier" "unless" "elsif" "begin_block" "until" "else" "while" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "case_match" "_statement" "begin" "end_block" "if" "ensure" "then" "interpolation" "block_body"))
   ("yield" ("superclass" "if_guard" "program" "until_modifier" "then" "case" "parenthesized_statements" "binary" "array" "unless_modifier" "scope_resolution" "element_reference" "unless" "operator_assignment" "unary" "elsif" "begin_block" "until" "else" "while" "call" "_expression" "body_statement" "if_modifier" "rescue_modifier" "while_modifier" "do" "assignment" "case_match" "_statement" "expression_reference_pattern" "argument_list" "begin" "end_block" "unless_guard" "if" "ensure" _primary "interpolation" "block_body"))
  ) 
)
;; END Inverse production rules for ruby
;; START All node types in ruby
(defconst combobulate-rules-ruby-types 
 '("_arg" "_call_operator" "_expression" "_lhs" "_method_name" _nonlocal_variable "_pattern_constant" "_pattern_expr" _pattern_expr_basic _pattern_primitive "_pattern_top_expr_body" _primary _simple_numeric "_statement" _variable "alias" "alternative_pattern" "argument_list" "array" "array_pattern" "as_pattern" "assignment" "bare_string" "bare_symbol" "begin" "begin_block" "binary" "block" "block_argument" "block_body" "block_parameter" "block_parameters" "body_statement" "break" "call" "case" "case_match" "chained_string" "character" "class" "class_variable" "comment" "complex" "conditional" "constant" "delimited_symbol" "destructured_left_assignment" "destructured_parameter" "do" "do_block" "element_reference" "else" "elsif" "empty_statement" "encoding" "end_block" "ensure" "escape_sequence" "exception_variable" "exceptions" "expression_reference_pattern" "false" "file" "find_pattern" "float" "for" "forward_argument" "forward_parameter" "global_variable" "hash" "hash_key_symbol" "hash_pattern" "hash_splat_argument" "hash_splat_nil" "hash_splat_parameter" "heredoc_beginning" "heredoc_body" "heredoc_content" "heredoc_end" "identifier" "if" "if_guard" "if_modifier" "in" "in_clause" "instance_variable" "integer" "interpolation" "keyword_parameter" "keyword_pattern" "lambda" "lambda_parameters" "left_assignment_list" "line" "match_pattern" "method" "method_parameters" "module" "next" "nil" "operator" "operator_assignment" "optional_parameter" "pair" "parenthesized_pattern" "parenthesized_statements" "pattern" "program" "range" "rational" "redo" "regex" "rescue" "rescue_modifier" "rest_assignment" "retry" "return" "right_assignment_list" "scope_resolution" "self" "setter" "simple_symbol" "singleton_class" "singleton_method" "splat_argument" "splat_parameter" "string" "string_array" "string_content" "subshell" "super" "superclass" "symbol_array" "test_pattern" "then" "true" "unary" "undef" "uninterpreted" "unless" "unless_guard" "unless_modifier" "until" "until_modifier" "variable_reference_pattern" "when" "while" "while_modifier" "yield") 
)
;; END All node types in ruby
;; START All supertypes in ruby
(defconst combobulate-rules-ruby-supertypes 
 '("_arg" "_call_operator" "_expression" "_lhs" "_method_name" "_nonlocal_variable" "_pattern_constant" "_pattern_expr" "_pattern_expr_basic" "_pattern_primitive" "_pattern_top_expr_body" "_primary" "_simple_numeric" "_statement" "_variable") 
)
;; END All supertypes in ruby

;; START Auto-generated list of all languages
(defconst combobulate-rules-languages 
 '(c css dockerfile go html javascript json python ruby toml tsx typescript yaml) 
 "A list of all the languages that have production rules.")
;; END Auto-generated list of all languages
(defconst combobulate-rules-alist 
 `((c ,combobulate-rules-c)
 (css ,combobulate-rules-css)
 (dockerfile ,combobulate-rules-dockerfile)
 (go ,combobulate-rules-go)
 (html ,combobulate-rules-html)
 (javascript ,combobulate-rules-javascript)
 (json ,combobulate-rules-json)
 (python ,combobulate-rules-python)
 (ruby ,combobulate-rules-ruby)
 (toml ,combobulate-rules-toml)
 (tsx ,combobulate-rules-tsx)
 (typescript ,combobulate-rules-typescript)
 (yaml ,combobulate-rules-yaml)
))

(defconst combobulate-rules-inverse-alist 
 `((c ,combobulate-rules-c-inverse)
 (css ,combobulate-rules-css-inverse)
 (dockerfile ,combobulate-rules-dockerfile-inverse)
 (go ,combobulate-rules-go-inverse)
 (html ,combobulate-rules-html-inverse)
 (javascript ,combobulate-rules-javascript-inverse)
 (json ,combobulate-rules-json-inverse)
 (python ,combobulate-rules-python-inverse)
 (ruby ,combobulate-rules-ruby-inverse)
 (toml ,combobulate-rules-toml-inverse)
 (tsx ,combobulate-rules-tsx-inverse)
 (typescript ,combobulate-rules-typescript-inverse)
 (yaml ,combobulate-rules-yaml-inverse)
))

(defconst combobulate-rules-types-alist 
 `((c ,combobulate-rules-c-types)
 (css ,combobulate-rules-css-types)
 (dockerfile ,combobulate-rules-dockerfile-types)
 (go ,combobulate-rules-go-types)
 (html ,combobulate-rules-html-types)
 (javascript ,combobulate-rules-javascript-types)
 (json ,combobulate-rules-json-types)
 (python ,combobulate-rules-python-types)
 (ruby ,combobulate-rules-ruby-types)
 (toml ,combobulate-rules-toml-types)
 (tsx ,combobulate-rules-tsx-types)
 (typescript ,combobulate-rules-typescript-types)
 (yaml ,combobulate-rules-yaml-types)
))

(defconst combobulate-rules-supertypes-alist 
 `((c ,combobulate-rules-c-supertypes)
 (css ,combobulate-rules-css-supertypes)
 (dockerfile ,combobulate-rules-dockerfile-supertypes)
 (go ,combobulate-rules-go-supertypes)
 (html ,combobulate-rules-html-supertypes)
 (javascript ,combobulate-rules-javascript-supertypes)
 (json ,combobulate-rules-json-supertypes)
 (python ,combobulate-rules-python-supertypes)
 (ruby ,combobulate-rules-ruby-supertypes)
 (toml ,combobulate-rules-toml-supertypes)
 (tsx ,combobulate-rules-tsx-supertypes)
 (typescript ,combobulate-rules-typescript-supertypes)
 (yaml ,combobulate-rules-yaml-supertypes)
))

(provide 'combobulate-rules)
